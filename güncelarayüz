<!-- EN G√úNCELƒ∞ BUNA BAK -->
<!DOCTYPE html>
<html lang="tr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TEMP-üåè Air Quality Monitoring</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .gradient-bg {
            background: linear-gradient(135deg, #568ad3 0%, #568ad3 50%, #568ad3 100%);
        }

        .air-quality-excellent {
            background: linear-gradient(135deg, #10b981, #059669);
        }

        .air-quality-good {
            background: linear-gradient(135deg, #10b981, #059669);
        }

        .air-quality-moderate {
            background: linear-gradient(135deg, #f59e0b, #d97706);
        }

        .air-quality-unhealthy {
            background: linear-gradient(135deg, #f97316, #ea580c);
        }

        .air-quality-very-unhealthy {
            background: linear-gradient(135deg, #ef4444, #dc2626);
        }

        .air-quality-hazardous {
            background: linear-gradient(135deg, #7c2d12, #92400e);
        }

        .notification-slide {
            animation: slideInRight 0.5s ease-out;
        }

        @keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        .pulse-dot {
            animation: pulse 2s infinite;
        }

        @keyframes pulse {

            0%,
            100% {
                opacity: 1;
            }

            50% {
                opacity: 0.5;
            }
        }

        /* Arama dropdown i√ßin z-index ayarƒ± */
        .search-dropdown {
            max-height: 200px;
            overflow-y: auto;
            z-index: 10000 !important;
            /* Haritadan daha y√ºksek */
            position: relative;
        }

        /* Map container i√ßin z-index ayarƒ± */
        #map {
            z-index: 1;
            position: relative;
        }

        /* Leaflet map katmanlarƒ± i√ßin z-index ayarƒ± */
        .leaflet-container {
            z-index: 1;
        }

        .leaflet-pane {
            z-index: 1;
        }

        .leaflet-top,
        .leaflet-bottom {
            z-index: 1;
        }

        /* Navigation i√ßin z-index */
        nav.gradient-bg {
            z-index: 1000;
            position: relative;
        }

        /* Search bar i√ßin z-index */
        .bg-white.shadow-sm.border-b {
            z-index: 1001;
            position: relative;
        }

        /* Aktivite container i√ßin yeni stil */
        #activityContainer {
            display: flex;
            transition: transform 0.3s ease-in-out;
            width: 100%;
            overflow: hidden;
            /* Ekle: Ta≈üma sorununu engeller */
        }

        #activityContainer>div {
            flex-shrink: 0;
            width: 100%;


        }

        /* Smart Notifications Panel i√ßin z-index ayarƒ± */
        #smartNotificationsPanel {
            z-index: 10002 !important;
        }

        /* Notification Container i√ßin z-index ayarƒ± */
        #notificationContainer {
            z-index: 10002 !important;
        }
    </style>
</head>

<body class="bg-gray-50 font-sans min-h-screen">
    <!-- Navigation -->
    <nav class="gradient-bg text-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-16">
                <div class="flex items-center space-x-3">
                    <div class="flex items-center justify-center"
                        style="margin-top: 4px; margin-bottom: -8px;margin-right:-25px;">
                        <img src="82b58dd9-91c8-4c6a-a8a3-dde34dde7404 (1).png" alt="TEMPO"
                            class="w-28 h-28 object-contain"> <!--LOGO-->
                    </div>
                    <div>
                        <h1 class="text-xl font-bold">TEMPO</h1>
                        <p class="text-xs opacity-90">
                            Air Quality Monitoring</p>
                    </div>
                </div>

                <div class="hidden md:flex space-x-6">
                    <button onclick="showSection('home')"
                        class="nav-btn px-3 py-2 rounded-md hover:bg-white hover:bg-opacity-20 transition-colors flex items-center gap-2">
                        <div class="w-2 h-2 bg-green-400 rounded-full pulse-dot"></div>
                        Live
                    </button>
                    <button onclick="showSection('forecast')"
                        class="nav-btn px-3 py-2 rounded-md hover:bg-white hover:bg-opacity-20 transition-colors">Weather</button>
                    <button onclick="showSection('map')"
                        class="nav-btn px-3 py-2 rounded-md hover:bg-white hover:bg-opacity-20 transition-colors">Map</button>
                    <button onclick="showSection('alerts')"
                        class="nav-btn px-3 py-2 rounded-md hover:bg-white hover:bg-opacity-20 transition-colors">Notifications</button>
                    <button onclick="showSection('settings')"
                        class="nav-btn px-3 py-2 rounded-md hover:bg-white hover:bg-opacity-20 transition-colors">Settings</button>
                </div>

                <div class="md:hidden">
                    <button onclick="toggleMobileMenu()" class="p-2">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M4 6h16M4 12h16M4 18h16"></path>
                        </svg>
                    </button>
                </div>
            </div>
        </div>

        <!-- Mobile Menu -->
        <div id="mobileMenu" class="hidden md:hidden bg-black bg-opacity-20">
            <div class="px-2 pt-2 pb-3 space-y-1">
                <button onclick="showSection('home')"
                    class="block w-full text-left px-3 py-2 rounded-md hover:bg-white hover:bg-opacity-20 flex items-center gap-2">
                    <div class="w-2 h-2 bg-green-400 rounded-full pulse-dot"></div>
                    Live
                </button>
                <button onclick="showSection('forecast')"
                    class="block w-full text-left px-3 py-2 rounded-md hover:bg-white hover:bg-opacity-20">Weather</button>
                <button onclick="showSection('map')"
                    class="block w-full text-left px-3 py-2 rounded-md hover:bg-white hover:bg-opacity-20">Map</button>
                <button onclick="showSection('alerts')"
                    class="block w-full text-left px-3 py-2 rounded-md hover:bg-white hover:bg-opacity-20">Notifications</button>
                <button onclick="showSection('settings')"
                    class="block w-full text-left px-3 py-2 rounded-md hover:bg-white hover:bg-opacity-20">Settings</button>
            </div>
        </div>
    </nav>

    <!-- Search Bar -->
    <div class="bg-white shadow-sm border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 py-3">
            <div class="flex flex-col sm:flex-row gap-3">
                <div class="flex-1 relative">
                    <input type="text" id="searchInput" placeholder="State search..."
                        class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        oninput="showSearchSuggestions(this.value)" onblur="hideSearchSuggestions()"
                        onfocus="showSearchSuggestions(this.value)">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center">
                        <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    </div>
                    <!-- Search Suggestions Dropdown -->
                    <div id="searchSuggestions"
                        class="absolute top-full left-0 right-0 bg-white border border-gray-300 rounded-lg shadow-lg z-50 hidden search-dropdown">
                        <!-- Suggestions will be populated here -->
                    </div>
                </div>
                <button onclick="searchLocation()"
                    class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                    Search
                </button>
                <button onclick="getCurrentLocation()"
                    class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z">
                        </path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                    My location
                </button>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 py-6">

        <!-- Home Section -->
        <div id="homeSection" class="section">
            <!-- Current Air Quality Card -->
            <div class="bg-white rounded-xl shadow-lg p-6 mb-6">
                <div class="flex flex-col lg:flex-row items-center justify-between">
                    <div class="text-center lg:text-left mb-4 lg:mb-0">
                        <h2 class="text-2xl font-bold text-gray-800 mb-2">Current Air Quality</h2>
                        <p id="currentLocation" class="text-gray-600 mb-4">üìç New York City, USA</p>
                        <div class="flex items-center justify-center lg:justify-start gap-4">
                            <div id="aqiValue" class="text-6xl font-bold text-emerald-600">42</div>
                            <div>
                                <div id="aqiStatus" class="text-xl font-semibold text-emerald-600">Good</div>
                                <div class="text-sm text-gray-500">AQI Value</div>
                            </div>
                        </div>
                    </div>
                    <div id="aqiCircle" </div>
                    </div>
                </div>

                <!-- Pollutant Details -->
                <div class="grid grid-cols-2 md:grid-cols-5 gap-6 mt-6 pt-6 border-t border-gray-200">
                    <div class="text-center relative group cursor-help">
                        <div class="text-2xl font-bold text-black-600" id="pm25">12</div>
                        <div class="text-sm text-gray-600">PM2.5</div>
                        <div class="text-xs text-gray-500">¬µg/m¬≥</div>
                        <div
                            class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-800 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-10">
                            Very fine dust particles smaller than 2.5 micrometers.
                        </div>
                    </div>
                    <div class="text-center relative group cursor-help">
                        <div class="text-2xl font-bold text-black-600" id="pm10">18</div>
                        <div class="text-sm text-gray-600">PM10</div>
                        <div class="text-xs text-gray-500">¬µg/m¬≥</div>
                        <div
                            class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-800 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-10">
                            Dust particles smaller than 10 micrometers. Undetectable to the naked eye.
                        </div>
                    </div>
                    <div class="text-center relative group cursor-help">
                        <div class="text-2xl font-bold text-black-600" id="no2">25</div>
                        <div class="text-sm text-gray-600">NO‚ÇÇ</div>
                        <div class="text-xs text-gray-500">¬µg/m¬≥</div>
                        <div
                            class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-800 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-10">
                            Nitrogen dioxide gas often originates from vehicle exhausts and industrial activities.
                        </div>
                    </div>
                    <div class="text-center relative group cursor-help">
                        <div class="text-2xl font-bold text-black-600" id="o3">85</div>
                        <div class="text-sm text-gray-600">O‚ÇÉ</div>
                        <div class="text-xs text-gray-500">¬µg/m¬≥</div>
                        <div
                            class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-800 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-10">
                            Ozone gas occurs naturally in the atmosphere, and can increase especially on sunny days.
                        </div>
                    </div>
                    <div class="text-center relative group cursor-help">
                        <div class="text-2xl font-bold text-black-600" id="co">0.8</div>
                        <div class="text-sm text-gray-600">CO</div>
                        <div class="text-xs text-gray-500">mg/m¬≥</div>
                        <div
                            class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-800 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-10">
                            Carbon monoxide gas is produced by incompletely burned fuels (e.g., vehicles, stoves,
                            fires).
                        </div>
                    </div>
                </div>
            </div>

            <!-- Quick Stats - 3x2 Grid -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                <!-- First Row -->
                <div class="bg-white rounded-xl shadow-lg p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <h3 class="text-lg font-semibold text-gray-800">Weather</h3>
                            <p class="text-3xl font-bold text-blue-600 mt-2">22¬∞C</p>
                            <p class="text-sm text-gray-600">Partly cloudy</p>
                        </div>
                        <div class=""> <!--EMOIJININ ARKASI-->
                            <span class="text-4xl">‚õÖ</span>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-xl shadow-lg p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <h3 class="text-lg font-semibold text-gray-800">Humidity</h3>
                            <div class="flex items-center gap-2 mt-2">
                                <p id="humidityValue" class="text-3xl font-bold text-blue-600">68%</p>
                                <div id="humidityTrend" class="flex items-center text-green-600">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M7 17l9.2-9.2M17 17V7H7"></path>
                                    </svg>
                                    <span class="text-xs ml-1">Rising</span>
                                </div>
                            </div>
                            <p class="text-sm text-gray-600">Moderate</p>
                        </div>
                        <div class="">
                            <span class="text-4xl">üíß</span>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-xl shadow-lg p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <h3 class="text-lg font-semibold text-black-800">Wind</h3>
                            <p id="windValue" class="text-3xl font-bold text-blue-600 mt-2">12 km/h</p>
                            <p class="text-sm text-gray-600">Northwest</p>
                        </div>
                        <div class="">
                            <span class="text-4xl">üí®</span>
                        </div>
                    </div>
                </div>

                <!-- Second Row -->
                <div class="bg-white rounded-xl shadow-lg p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <h3 class="text-lg font-semibold text-black-800">Precipitation</h3>
                            <p id="precipitationValue" class="text-3xl font-bold text-blue-600 mt-2">2.5mm</p>
                            <p class="text-sm text-gray-600">Last 24 hours</p>
                        </div>
                        <div class="">
                            <span class="text-4xl">üåßÔ∏è</span>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-xl shadow-lg p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <h3 class="text-lg font-semibold text-black-800">Pressure</h3>
                            <p id="pressureValue" class="text-3xl font-bold text-blue-600 mt-2">1013</p>
                            <p class="text-sm text-gray-600">hPa</p>
                        </div>
                        <div class="">
                            <span class="text-4xl">üìä</span>
                        </div>
                    </div>
                </div>

                <!-- Polen kartƒ± yerine Hissedilen Sƒ±caklƒ±k kartƒ± -->
                <div class="bg-white rounded-xl shadow-lg p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <h3 class="text-lg font-semibold text-gray-800">Feels Like Temperature</h3>
                            <p id="feelsLikeTemp" class="text-3xl font-bold text-orange-600 mt-2">24¬∞C</p>
                            <p class="text-sm text-gray-600">Humidity and Wind Effect</p>
                        </div>
                        <div class="">
                            <span class="text-4xl">üå°Ô∏è</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Activity and Health Row -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                <!-- Activity Suitability -->
                <div class="bg-white rounded-xl shadow-lg p-6">
                    <h3 class="text-lg font-semibold text-gray-800 mb-4">Activity Status</h3>

                    <div class="relative h-48 overflow-hidden">
                        <div id="activityContainer" class="flex h-full transition-transform duration-300 ease-in-out"
                            style="width: max-content;">
                            <!-- Activities will be populated by JavaScript -->
                        </div>

                        <!-- Navigation dots -->
                        <div id="activityDots" class="absolute bottom-2 left-1/2 transform -translate-x-1/2 flex gap-2">
                            <!-- Dots will be populated by JavaScript -->
                        </div>

                        <!-- Navigation arrows -->
                        <button id="prevActivity" onclick="previousActivity()"
                            class="absolute left-2 top-1/2 transform -translate-y-1/2 w-8 h-8 bg-white bg-opacity-80 rounded-full shadow-md flex items-center justify-center hover:bg-opacity-100 transition-all">
                            <svg class="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M15 19l-7-7 7-7"></path>
                            </svg>
                        </button>
                        <button id="nextActivity" onclick="nextActivity()"
                            class="absolute right-2 top-1/2 transform -translate-y-1/2 w-8 h-8 bg-white bg-opacity-80 rounded-full shadow-md flex items-center justify-center hover:bg-opacity-100 transition-all">
                            <svg class="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7">
                                </path>
                            </svg>
                        </button>
                    </div>
                </div>
                <!-- <!-- Sƒ±caklƒ±k Bilgileri -->
                <!-- Bulutluluk Bilgileri -->
                <div class="bg-white rounded-xl shadow-lg p-6">
                    <div class="space-y-6">
                        <!-- Bulutluluk Oranƒ± -->
                        <div class="bg-white rounded-xl shadow-lg p-6">
                            <div class="flex items-center justify-between">
                                <div>
                                    <h3 class="text-lg font-semibold text-gray-800">Cloudiness</h3>
                                    <p id="cloudinessValue" class="text-3xl font-bold text-blue-600 mt-2">45%</p>
                                    <p class="text-sm text-gray-600">Partly cloudy</p>
                                </div>
                                <div class="">
                                    <span class="text-4xl">‚òÅÔ∏è</span>
                                </div>
                            </div>
                        </div>

                        <!-- UV ƒ∞ndeksi -->
                        <div class="bg-white rounded-xl shadow-lg p-6">
                            <div class="flex items-center justify-between">
                                <div>
                                    <h3 class="text-lg font-semibold text-gray-800">UV Index</h3>
                                    <p id="uvIndexValue" class="text-3xl font-bold text-orange-600 mt-2">5</p>
                                    <p class="text-sm text-gray-600">Moderate</p>
                                </div>
                                <div class="">
                                    <span class="text-4xl">‚òÄÔ∏è</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <!-- Forecast Section -->
        <div id="forecastSection" class="section hidden">
            <!-- Forecast Toggle Buttons -->
            <div class="flex flex-col sm:flex-row gap-4 mb-6">

                <button id="forecast24Hour" onclick="showForecast('24hour')"
                    class="px-6 py-3 bg-gray-200 text-gray-600 rounded-lg hover:bg-gray-300 transition-colors font-medium">
                    24 Hour Forecast
                </button>
            </div>
            <!-- 7-Day Forecast -->

            <!-- 24-Hour Forecast -->

            <div id="forecast24HourData" class="bg-white rounded-xl shadow-lg p-6 ">
                <h2 class="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-2">
                    <span class="text-2xl"></span>
                    24 Hour Weather Forecast
                </h2>

                <!-- Hourly Weather Table -->
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead>
                            <tr class="border-b border-gray-200">
                                <th class="text-left py-3 px-3 font-semibold text-gray-700">Hour</th>
                                <th class="text-center py-3 px-3 font-semibold text-gray-700">Weather</th>
                                <th class="text-center py-3 px-3 font-semibold text-gray-700">Temperature</th>
                                <th class="text-center py-3 px-3 font-semibold text-gray-700">Humidity</th>
                                <th class="text-center py-3 px-3 font-semibold text-gray-700">Wind</th>
                                <th class="text-center py-3 px-3 font-semibold text-gray-700">Precipitation</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="border-b border-gray-100 hover:bg-gray-50">
                                <td class="py-3 px-3 font-semibold text-blue-600">Now</td>
                                <td class="py-3 px-3 text-center">
                                    <div class="text-2xl">‚òÄÔ∏è</div>
                                </td>
                                <td class="py-3 px-3 text-center font-bold text-blue-600">22¬∞C</td>
                                <td class="py-3 px-3 text-center text-cyan-600">68%</td>
                                <td class="py-3 px-3 text-center text-violet-600">12 km/h</td>
                                <td class="py-3 px-3 text-center text-blue-600">0%</td>
                            </tr>
                            <tr class="border-b border-gray-100 hover:bg-gray-50">
                                <td class="py-3 px-3">15:00</td>
                                <td class="py-3 px-3 text-center">
                                    <div class="text-2xl">‚òÄÔ∏è</div>
                                </td>
                                <td class="py-3 px-3 text-center font-bold text-orange-600">24¬∞C</td>
                                <td class="py-3 px-3 text-center text-cyan-600">65%</td>
                                <td class="py-3 px-3 text-center text-violet-600">14 km/h</td>
                                <td class="py-3 px-3 text-center text-blue-600">0%</td>
                            </tr>
                            <tr class="border-b border-gray-100 hover:bg-gray-50">
                                <td class="py-3 px-3">18:00</td>
                                <td class="py-3 px-3 text-center">
                                    <div class="text-2xl">üåÖ</div>
                                </td>
                                <td class="py-3 px-3 text-center font-bold text-orange-600">23¬∞C</td>
                                <td class="py-3 px-3 text-center text-cyan-600">64%</td>
                                <td class="py-3 px-3 text-center text-violet-600">13 km/h</td>
                                <td class="py-3 px-3 text-center text-blue-600">0%</td>
                            </tr>
                            <tr class="border-b border-gray-100 hover:bg-gray-50">
                                <td class="py-3 px-3">21:00</td>
                                <td class="py-3 px-3 text-center">
                                    <div class="text-2xl">üåô</div>
                                </td>
                                <td class="py-3 px-3 text-center font-bold text-gray-600">18¬∞C</td>
                                <td class="py-3 px-3 text-center text-cyan-600">75%</td>
                                <td class="py-3 px-3 text-center text-violet-600">9 km/h</td>
                                <td class="py-3 px-3 text-center text-blue-600">0%</td>
                            </tr>
                            <tr class="border-b border-gray-100 hover:bg-gray-50">
                                <td class="py-3 px-3">00:00</td>
                                <td class="py-3 px-3 text-center">
                                    <div class="text-2xl">üåô</div>
                                </td>
                                <td class="py-3 px-3 text-center font-bold text-cyan-600">15¬∞C</td>
                                <td class="py-3 px-3 text-center text-cyan-600">82%</td>
                                <td class="py-3 px-3 text-center text-violet-600">6 km/h</td>
                                <td class="py-3 px-3 text-center text-blue-600">10%</td>
                            </tr>
                            <tr class="border-b border-gray-100 hover:bg-gray-50">
                                <td class="py-3 px-3">03:00</td>
                                <td class="py-3 px-3 text-center">
                                    <div class="text-2xl">üåô</div>
                                </td>
                                <td class="py-3 px-3 text-center font-bold text-indigo-600">13¬∞C</td>
                                <td class="py-3 px-3 text-center text-cyan-600">85%</td>
                                <td class="py-3 px-3 text-center text-violet-600">5 km/h</td>
                                <td class="py-3 px-3 text-center text-blue-600">15%</td>
                            </tr>
                            <tr class="border-b border-gray-100 hover:bg-gray-50">
                                <td class="py-3 px-3">06:00</td>
                                <td class="py-3 px-3 text-center">
                                    <div class="text-2xl">üåÖ</div>
                                </td>
                                <td class="py-3 px-3 text-center font-bold text-blue-600">14¬∞C</td>
                                <td class="py-3 px-3 text-center text-cyan-600">80%</td>
                                <td class="py-3 px-3 text-center text-violet-600">7 km/h</td>
                                <td class="py-3 px-3 text-center text-blue-600">5%</td>
                            </tr>
                            <tr class="border-b border-gray-100 hover:bg-gray-50">
                                <td class="py-3 px-3">09:00</td>
                                <td class="py-3 px-3 text-center">
                                    <div class="text-2xl">üå§Ô∏è</div>
                                </td>
                                <td class="py-3 px-3 text-center font-bold text-green-600">18¬∞C</td>
                                <td class="py-3 px-3 text-center text-cyan-600">70%</td>
                                <td class="py-3 px-3 text-center text-violet-600">10 km/h</td>
                                <td class="py-3 px-3 text-center text-blue-600">0%</td>
                            </tr>
                            <tr class="border-b border-gray-100 hover:bg-gray-50">
                                <td class="py-3 px-3">12:00</td>
                                <td class="py-3 px-3 text-center">
                                    <div class="text-2xl">‚òÄÔ∏è</div>
                                </td>
                                <td class="py-3 px-3 text-center font-bold text-yellow-600">21¬∞C</td>
                                <td class="py-3 px-3 text-center text-cyan-600">65%</td>
                                <td class="py-3 px-3 text-center text-violet-600">12 km/h</td>
                                <td class="py-3 px-3 text-center text-blue-600">0%</td>
                            </tr>
                            <tr class="hover:bg-gray-50">
                                <td class="py-3 px-3">15:00</td>
                                <td class="py-3 px-3 text-center">
                                    <div class="text-2xl">‚òÄÔ∏è</div>
                                </td>
                                <td class="py-3 px-3 text-center font-bold text-orange-600">24¬∞C</td>
                                <td class="py-3 px-3 text-center text-cyan-600">62%</td>
                                <td class="py-3 px-3 text-center text-violet-600">14 km/h</td>
                                <td class="py-3 px-3 text-center text-blue-600">0%</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Map Section -->
        <div id="mapSection" class="section hidden">
            <div class="bg-white rounded-xl shadow-lg p-6 mb-6">
                <div class="flex flex-col lg:flex-row gap-4 mb-6">
                    <h2 class="text-2xl font-bold text-gray-800 flex-1">Air Quality Map</h2>

                    <!-- Data Layer Selection -->
                    <div class="flex flex-wrap gap-2">
                        <button onclick="changeMapLayer('o2o2')" id="layerO2O2"
                            class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors text-sm font-medium">
                            O‚ÇÇO‚ÇÇ
                        </button>
                        <button onclick="changeMapLayer('no2')" id="layerNO2"
                            class="px-4 py-2 bg-gray-200 text-gray-600 rounded-lg hover:bg-gray-300 transition-colors text-sm font-medium">
                            NO‚ÇÇ
                        </button>
                        <button onclick="changeMapLayer('o3')" id="layerO3"
                            class="px-4 py-2 bg-gray-200 text-gray-600 rounded-lg hover:bg-gray-300 transition-colors text-sm font-medium">
                            O‚ÇÉ
                        </button>
                        <button onclick="changeMapLayer('hcho')" id="layerHCHO"
                            class="px-4 py-2 bg-gray-200 text-gray-600 rounded-lg hover:bg-gray-300 transition-colors text-sm font-medium">
                            HCHO
                        </button>
                    </div>
                </div>

                <!-- Legend -->
                <div class="mb-4 p-3 bg-gray-50 rounded-lg">
                    <div class="flex items-center gap-4 text-sm">
                        <span class="font-medium text-gray-700">Color Codes:</span>
                        <div class="flex items-center gap-1">
                            <div class="w-4 h-4 bg-green-500 rounded"></div>
                            <span class="text-gray-600">Good</span>
                        </div>
                        <div class="flex items-center gap-1">
                            <div class="w-4 h-4 bg-yellow-500 rounded"></div>
                            <span class="text-gray-600">Moderate</span>
                        </div>
                        <div class="flex items-center gap-1">
                            <div class="w-4 h-4 bg-orange-500 rounded"></div>
                            <span class="text-gray-600">Unhealthy</span>
                        </div>
                        <div class="flex items-center gap-1">
                            <div class="w-4 h-4 bg-red-500 rounded"></div>
                            <span class="text-gray-600">Hazardous</span>
                        </div>
                    </div>
                </div>

                <div id="map" class="w-full h-96 rounded-lg border"></div>
            </div>
        </div>
        <!-- Alerts Section -->
        <div id="alertsSection" class="section hidden">
            <div class="bg-white rounded-xl shadow-lg p-6">
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-2xl font-bold text-gray-800">Notifications</h2>
                    <button onclick="markAllAsRead()" id="markAllReadBtn"
                        class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium flex items-center gap-2">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7">
                            </path>
                        </svg>
                        Read All
                    </button>
                </div>

                <div id="alertsList" class="space-y-4">
                    <!-- Notifications will be populated here -->
                </div>
            </div>
        </div>

        <!-- Settings Section -->
        <div id="settingsSection" class="section hidden">
            <div class="bg-white rounded-xl shadow-lg p-6 mb-6">
                <h2 class="text-2xl font-bold text-gray-800 mb-6">Settings</h2>

                <div class="space-y-6">
                    <!-- Activity Preferences -->
                    <div>
                        <h3 class="text-lg font-semibold text-gray-800 mb-4">Activity Preferences</h3>
                        <p class="text-sm text-gray-600 mb-4">What activities do you want to show in the Live tab?</p>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="checkbox" id="activity-running" checked class="mr-3 text-blue-600"
                                    onchange="updateActivityPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">üèÉ‚Äç‚ôÇÔ∏è</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Running</span>
                                </div>
                            </label>

                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="checkbox" id="activity-cycling" checked class="mr-3 text-blue-600"
                                    onchange="updateActivityPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">üö¥‚Äç‚ôÇÔ∏è</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Bicycle</span>
                                </div>
                            </label>

                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="checkbox" id="activity-walking" class="mr-3 text-blue-600"
                                    onchange="updateActivityPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">üö∂‚Äç‚ôÇÔ∏è</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Walking</span>
                                </div>
                            </label>

                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="checkbox" id="activity-sports" class="mr-3 text-blue-600"
                                    onchange="updateActivityPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">‚öΩ</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Outdoor Sport</span>
                                </div>
                            </label>

                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="checkbox" id="activity-swimming" class="mr-3 text-blue-600"
                                    onchange="updateActivityPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">üèä‚Äç‚ôÇÔ∏è</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Swimming</span>
                                </div>
                            </label>

                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="checkbox" id="activity-hiking" class="mr-3 text-blue-600"
                                    onchange="updateActivityPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">ü•æ</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Hiking</span>
                                </div>
                            </label>

                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="checkbox" id="activity-tennis" class="mr-3 text-blue-600"
                                    onchange="updateActivityPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">üéæ</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Tennis</span>
                                </div>
                            </label>

                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="checkbox" id="activity-golf" class="mr-3 text-blue-600"
                                    onchange="updateActivityPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">‚õ≥</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Golf</span>
                                </div>
                            </label>
                        </div>

                    </div>
                </div>
            </div>

            <!-- Health Settings -->
            <div class="bg-white rounded-xl shadow-lg p-6 mb-6">
                <h2 class="text-2xl font-bold text-gray-800 mb-6">Health Settings</h2>

                <div class="space-y-6">
                    <!-- Age Selection -->
                    <div>
                        <h3 class="text-lg font-semibold text-gray-800 mb-4">Age Group</h3>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="radio" name="age-group" value="child" class="mr-3 text-blue-600"
                                    onchange="updateHealthPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">üë∂</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Child (0-17 years)</span>
                                </div>
                            </label>

                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="radio" name="age-group" value="adult" checked class="mr-3 text-blue-600"
                                    onchange="updateHealthPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">üßë</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Adult (18-64 years)</span>
                                </div>
                            </label>

                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="radio" name="age-group" value="elderly" class="mr-3 text-blue-600"
                                    onchange="updateHealthPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">üë¥</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Senior (65+ years)</span>
                                </div>
                            </label>
                        </div>
                    </div>

                    <!-- Pregnancy Status -->
                    <div>
                        <h3 class="text-lg font-semibold text-gray-800 mb-4">Pregnancy Status</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="checkbox" id="pregnancy-status" class="mr-3 text-pink-600"
                                    onchange="updateHealthPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">ü§∞</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Pregnant</span>
                                </div>
                            </label>

                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="checkbox" id="breastfeeding-status" class="mr-3 text-pink-600"
                                    onchange="updateHealthPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">ü§±</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Breastfeeding Mother</span>
                                </div>
                            </label>
                        </div>
                    </div>

                    <!-- Respiratory System Diseases -->
                    <div>
                        <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
                            <span class="text-xl">ü´Å</span>
                            Respiratory Diseases
                        </h3>
                        <p class="text-sm text-gray-600 mb-4">Select the respiratory diseases you have:</p>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="checkbox" id="health-asthma" class="mr-3 text-red-600"
                                    onchange="updateHealthPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">ü´Å</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Asthma</span>
                                </div>
                            </label>

                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="checkbox" id="health-copd" class="mr-3 text-red-600"
                                    onchange="updateHealthPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">üí®</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">COPD / Respiratory Problems</span>
                                </div>
                            </label>

                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="checkbox" id="health-bronchitis" class="mr-3 text-red-600"
                                    onchange="updateHealthPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">ü¶†</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Chronic Bronchitis</span>
                                </div>
                            </label>

                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="checkbox" id="health-sinusitis" class="mr-3 text-red-600"
                                    onchange="updateHealthPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">üò§</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Sinusitis</span>
                                </div>
                            </label>

                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="checkbox" id="health-allergies" class="mr-3 text-red-600"
                                    onchange="updateHealthPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">ü§ß</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Allergy (Pollen, Dust, Animal Fur)</span>
                                </div>
                            </label>
                        </div>
                    </div>

                    <!-- Cardiovascular and Metabolic Diseases -->
                    <div>
                        <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
                            <span class="text-xl">‚ù§Ô∏è</span>
                            Cardiovascular and Metabolic Diseases
                        </h3>
                        <p class="text-sm text-gray-600 mb-4">Select the cardiovascular and metabolic diseases you have:
                        </p>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="checkbox" id="health-heart-disease" class="mr-3 text-red-600"
                                    onchange="updateHealthPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">üíî</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Heart Disease</span>
                                </div>
                            </label>

                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="checkbox" id="health-hypertension" class="mr-3 text-red-600"
                                    onchange="updateHealthPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">üìà</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Hypertension</span>
                                </div>
                            </label>

                            <label
                                class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                                <input type="checkbox" id="health-diabetes" class="mr-3 text-red-600"
                                    onchange="updateHealthPreferences()">
                                <div class="flex items-center gap-3">
                                    <div class="">
                                        <span class="text-xl">ü©∏</span>
                                    </div>
                                    <span class="text-gray-700 font-medium">Diabetes</span>
                                </div>
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Smart Notifications Panel -->
    <div id="smartNotificationsPanel" class="fixed top-20 right-4 z-50 w-80 space-y-2">
        <!-- Smart notifications will be populated here -->
    </div>

    <!-- Notification Container -->
    <div id="notificationContainer" class="fixed top-20 right-4 z-50 space-y-2"></div>

    <script>
        let map;
        let currentChart;
        let currentMapLayer = 'pm25';

        // North American countries, states/provinces, and cities for search suggestions
        const northAmericanCountries = [
            { name: 'USA', type: 'country', lat: 39.8283, lng: -98.5795 },
            { name: 'Canada', type: 'country', lat: 56.1304, lng: -106.3468 },
            { name: 'Mexican', type: 'country', lat: 23.6345, lng: -102.5528 }
        ];

        const northAmericanStates = [
            // US States
            { name: 'Alabama', country: 'USA', type: 'state', lat: 32.3617, lng: -86.2792 },
            { name: 'Alaska', country: 'USA', type: 'state', lat: 64.0685, lng: -152.2782 },
            { name: 'Arizona', country: 'USA', type: 'state', lat: 34.2744, lng: -111.2847 },
            { name: 'Arkansas', country: 'USA', type: 'state', lat: 34.7519, lng: -92.1313 },
            { name: 'California', country: 'USA', type: 'state', lat: 36.7783, lng: -119.4179 },
            { name: 'Colorado', country: 'USA', type: 'state', lat: 39.5501, lng: -105.7821 },
            { name: 'Connecticut', country: 'USA', type: 'state', lat: 41.6032, lng: -73.0877 },
            { name: 'Delaware', country: 'USA', type: 'state', lat: 38.9108, lng: -75.5277 },
            { name: 'Florida', country: 'USA', type: 'state', lat: 27.7663, lng: -81.6868 },
            { name: 'Georgia', country: 'USA', type: 'state', lat: 32.1656, lng: -82.9001 },
            { name: 'Hawaii', country: 'USA', type: 'state', lat: 19.8968, lng: -155.5828 },
            { name: 'Idaho', country: 'USA', type: 'state', lat: 44.0682, lng: -114.7420 },
            { name: 'Illinois', country: 'USA', type: 'state', lat: 40.6331, lng: -89.3985 },
            { name: 'Indiana', country: 'USA', type: 'state', lat: 40.2732, lng: -86.1349 },
            { name: 'Iowa', country: 'USA', type: 'state', lat: 41.8780, lng: -93.0977 },
            { name: 'Kansas', country: 'USA', type: 'state', lat: 38.5266, lng: -96.7265 },
            { name: 'Kentucky', country: 'USA', type: 'state', lat: 37.8393, lng: -84.2700 },
            { name: 'Louisiana', country: 'USA', type: 'state', lat: 31.2448, lng: -92.1450 },
            { name: 'Maine', country: 'USA', type: 'state', lat: 45.2538, lng: -69.4455 },
            { name: 'Maryland', country: 'USA', type: 'state', lat: 39.0458, lng: -76.6413 },
            { name: 'Massachusetts', country: 'USA', type: 'state', lat: 42.4072, lng: -71.3824 },
            { name: 'Michigan', country: 'USA', type: 'state', lat: 44.3467, lng: -85.4102 },
            { name: 'Minnesota', country: 'USA', type: 'state', lat: 46.7296, lng: -94.6859 },
            { name: 'Mississippi', country: 'USA', type: 'state', lat: 32.3547, lng: -89.3985 },
            { name: 'Missouri', country: 'USA', type: 'state', lat: 37.9643, lng: -91.8318 },
            { name: 'Montana', country: 'USA', type: 'state', lat: 47.0527, lng: -109.6333 },
            { name: 'Nebraska', country: 'USA', type: 'state', lat: 41.4925, lng: -99.9018 },
            { name: 'Nevada', country: 'USA', type: 'state', lat: 38.8026, lng: -116.4194 },
            { name: 'New Hampshire', country: 'USA', type: 'state', lat: 43.1939, lng: -71.5724 },
            { name: 'New Jersey', country: 'USA', type: 'state', lat: 40.0583, lng: -74.4057 },
            { name: 'New Mexico', country: 'USA', type: 'state', lat: 34.5199, lng: -105.8701 },
            { name: 'New York', country: 'USA', type: 'state', lat: 43.2994, lng: -74.2179 },
            { name: 'North Carolina', country: 'USA', type: 'state', lat: 35.7596, lng: -79.0193 },
            { name: 'North Dakota', country: 'USA', type: 'state', lat: 47.5515, lng: -101.0020 },
            { name: 'Ohio', country: 'USA', type: 'state', lat: 40.4173, lng: -82.9071 },
            { name: 'Oklahoma', country: 'USA', type: 'state', lat: 35.0078, lng: -97.0929 },
            { name: 'Oregon', country: 'USA', type: 'state', lat: 43.8041, lng: -120.5542 },
            { name: 'Pennsylvania', country: 'USA', type: 'state', lat: 41.2033, lng: -77.1945 },
            { name: 'Rhode Island', country: 'USA', type: 'state', lat: 41.6809, lng: -71.5118 },
            { name: 'South Carolina', country: 'USA', type: 'state', lat: 33.8361, lng: -81.1637 },
            { name: 'South Dakota', country: 'USA', type: 'state', lat: 43.9695, lng: -99.9018 },
            { name: 'Tennessee', country: 'USA', type: 'state', lat: 35.5175, lng: -86.5804 },
            { name: 'Texas', country: 'USA', type: 'state', lat: 31.9686, lng: -99.9018 },
            { name: 'Utah', country: 'USA', type: 'state', lat: 39.3210, lng: -111.0937 },
            { name: 'Vermont', country: 'USA', type: 'state', lat: 44.2601, lng: -72.5806 },
            { name: 'Virginia', country: 'USA', type: 'state', lat: 37.4316, lng: -78.6569 },
            { name: 'Washington', country: 'USA', type: 'state', lat: 47.7511, lng: -120.7401 },
            { name: 'West Virginia', country: 'USA', type: 'state', lat: 38.3498, lng: -80.6547 },
            { name: 'Wisconsin', country: 'USA', type: 'state', lat: 43.7844, lng: -88.7879 },
            { name: 'Wyoming', country: 'USA', type: 'state', lat: 43.0759, lng: -107.2903 },

            // Canadian Provinces and Territories
            { name: 'Alberta', country: 'Canada', type: 'province', lat: 53.9333, lng: -116.5765 },
            { name: 'British Columbia', country: 'Canada', type: 'province', lat: 53.7267, lng: -127.6476 },
            { name: 'Manitoba', country: 'Canada', type: 'province', lat: 53.7609, lng: -98.8139 },
            { name: 'New Brunswick', country: 'Canada', type: 'province', lat: 46.5653, lng: -66.4619 },
            { name: 'Newfoundland and Labrador', country: 'Canada', type: 'province', lat: 53.1355, lng: -57.6604 },
            { name: 'Northwest Territories', country: 'Canada', type: 'territory', lat: 64.8255, lng: -124.8457 },
            { name: 'Nova Scotia', country: 'Canada', type: 'province', lat: 44.6820, lng: -63.7443 },
            { name: 'Nunavut', country: 'Canada', type: 'territory', lat: 70.2998, lng: -83.1076 },
            { name: 'Ontario', country: 'Canada', type: 'province', lat: 51.2538, lng: -85.3232 },
            { name: 'Prince Edward Island', country: 'Canada', type: 'province', lat: 46.5107, lng: -63.4168 },
            { name: 'Quebec', country: 'Canada', type: 'province', lat: 52.9399, lng: -73.5491 },
            { name: 'Saskatchewan', country: 'Canada', type: 'province', lat: 52.9399, lng: -106.4509 },
            { name: 'Yukon', country: 'Canada', type: 'territory', lat: 64.2823, lng: -135.0000 },

            // Mexican States
            { name: 'Aguascalientes', country: 'Mexican', type: 'state', lat: 21.8853, lng: -102.2916 },
            { name: 'Baja California', country: 'Mexican', type: 'state', lat: 30.8406, lng: -115.2838 },
            { name: 'Baja California Sur', country: 'Mexican', type: 'state', lat: 26.0444, lng: -111.6660 },
            { name: 'Campeche', country: 'Mexican', type: 'state', lat: 19.8301, lng: -90.5349 },
            { name: 'Chiapas', country: 'Mexican', type: 'state', lat: 16.7569, lng: -93.1292 },
            { name: 'Chihuahua', country: 'Mexican', type: 'state', lat: 28.6353, lng: -106.0889 },
            { name: 'Coahuila', country: 'Mexican', type: 'state', lat: 27.0587, lng: -101.7068 },
            { name: 'Colima', country: 'Mexican', type: 'state', lat: 19.2452, lng: -103.7240 },
            { name: 'Durango', country: 'Mexican', type: 'state', lat: 24.5594, lng: -104.6591 },
            { name: 'Guanajuato', country: 'Mexican', type: 'state', lat: 21.0190, lng: -101.2574 },
            { name: 'Guerrero', country: 'Mexican', type: 'state', lat: 17.4392, lng: -99.5451 },
            { name: 'Hidalgo', country: 'Mexican', type: 'state', lat: 20.1011, lng: -98.7624 },
            { name: 'Jalisco', country: 'Mexican', type: 'state', lat: 20.6597, lng: -103.3496 },
            { name: 'M√©xico', country: 'Mexican', type: 'state', lat: 19.2808, lng: -99.7559 },
            { name: 'Michoac√°n', country: 'Mexican', type: 'state', lat: 19.5665, lng: -101.7068 },
            { name: 'Morelos', country: 'Mexican', type: 'state', lat: 18.6813, lng: -99.1013 },
            { name: 'Nayarit', country: 'Mexican', type: 'state', lat: 21.7514, lng: -104.8455 },
            { name: 'Nuevo Le√≥n', country: 'Mexican', type: 'state', lat: 25.5922, lng: -99.9962 },
            { name: 'Oaxaca', country: 'Mexican', type: 'state', lat: 17.0732, lng: -96.7266 },
            { name: 'Puebla', country: 'Mexican', type: 'state', lat: 19.0414, lng: -98.2063 },
            { name: 'Quer√©taro', country: 'Mexican', type: 'state', lat: 20.5888, lng: -100.3899 },
            { name: 'Quintana Roo', country: 'Mexican', type: 'state', lat: 19.1817, lng: -88.4791 },
            { name: 'San Luis Potos√≠', country: 'Mexican', type: 'state', lat: 22.1565, lng: -100.9855 },
            { name: 'Sinaloa', country: 'Mexican', type: 'state', lat: 25.1721, lng: -107.4795 },
            { name: 'Sonora', country: 'Mexican', type: 'state', lat: 29.2972, lng: -110.3309 },
            { name: 'Tabasco', country: 'Mexican', type: 'state', lat: 17.8409, lng: -92.6189 },
            { name: 'Tamaulipas', country: 'Mexican', type: 'state', lat: 24.2669, lng: -98.8363 },
            { name: 'Tlaxcala', country: 'Mexican', type: 'state', lat: 19.3139, lng: -98.2404 },
            { name: 'Veracruz', country: 'Mexican', type: 'state', lat: 19.1738, lng: -96.1342 },
            { name: 'Yucat√°n', country: 'Mexican', type: 'state', lat: 20.7099, lng: -89.0943 },
            { name: 'Zacatecas', country: 'Mexican', type: 'state', lat: 22.7709, lng: -102.5832 }
        ];

        const northAmericanCities = [

        ];


        // Hissedilen sƒ±caklƒ±k hesaplama fonksiyonu
        function calculateFeelsLike(temp, humidity, wind) {
            // Basit hissedilen sƒ±caklƒ±k hesaplamasƒ±
            // Sƒ±cak hava i√ßin: Y√ºksek nem sƒ±caklƒ±k hissini artƒ±rƒ±r
            let feelsLike = temp;

            if (temp >= 20) {
                // Sƒ±cak hava: nem etkisi
                if (humidity > 70) feelsLike += 3;
                else if (humidity > 50) feelsLike += 2;
                else if (humidity > 30) feelsLike += 1;
            } else {
                // Soƒüuk hava: r√ºzgar etkisi
                if (wind > 20) feelsLike -= 4;
                else if (wind > 15) feelsLike -= 3;
                else if (wind > 10) feelsLike -= 2;
                else if (wind > 5) feelsLike -= 1;
            }

            return Math.round(feelsLike);
        }

        // Hissedilen sƒ±caklƒ±k trendi fonksiyonu
        function getFeelsLikeTrend(temp, feelsLike) {
            if (feelsLike > temp) {
                return {
                    icon: '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 17l9.2-9.2M17 17V7H7"></path></svg>',
                    color: 'text-red-600',
                    text: 'Hotter'
                };
            } else if (feelsLike < temp) {
                return {
                    icon: '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 7l-9.2 9.2M7 7v10h10"></path></svg>',
                    color: 'text-blue-600',
                    text: 'Coller'
                };
            } else {
                return {
                    icon: '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path></svg>',
                    color: 'text-gray-600',
                    text: 'Same'
                };
            }
        }
        // Activity management
        const availableActivities = {
            running: {
                id: 'running',
                name: 'Running',
                icon: 'üèÉ‚Äç‚ôÇÔ∏è',
                bgColor: 'bg-gray-50',
                borderColor: 'border-black-200',
                iconBg: 'bg-gray-100',
                statusColor: 'text-orange-700',
                dotColor: 'bg-yellow-500'
            },
            cycling: {
                id: 'cycling',
                name: 'Bicycle',
                icon: 'üö¥‚Äç‚ôÇÔ∏è',
                bgColor: 'bg-gray-50',
                borderColor: 'border-black-200',
                iconBg: 'bg-gray-100',
                statusColor: 'text-orange-700',
                dotColor: 'bg-yellow-500'
            },
            walking: {
                id: 'walking',
                name: 'Walking',
                icon: 'üö∂‚Äç‚ôÇÔ∏è',
                bgColor: 'bg-gray-50',
                borderColor: 'border-black-200',
                iconBg: 'bg-gray-100',
                statusColor: 'text-orange-700',
                dotColor: 'bg-yellow-500'
            },
            sports: {
                id: 'sports',
                name: 'Outdoor Sports',
                icon: '‚öΩ',
                bgColor: 'bg-gray-50',
                borderColor: 'border-black-200',
                iconBg: 'bg-gray-100',
                statusColor: 'text-orange-700',
                dotColor: 'bg-yellow-500'
            },
            swimming: {
                id: 'swimming',
                name: 'Swimming',
                icon: 'üèä‚Äç‚ôÇÔ∏è',
                bgColor: 'bg-gray-50',
                borderColor: 'border-black-200',
                iconBg: 'bg-gray-100',
                statusColor: 'text-orange-700',
                dotColor: 'bg-yellow-500'
            },
            hiking: {
                id: 'hiking',
                name: 'Hiking',
                icon: 'ü•æ',
                bgColor: 'bg-gray-50',
                borderColor: 'border-black-200',
                iconBg: 'bg-gray-100',
                statusColor: 'text-orange-700',
                dotColor: 'bg-yellow-500'
            },
            tennis: {
                id: 'tennis',
                name: 'Tennis',
                icon: 'üéæ',
                bgColor: 'bg-gray-50',
                borderColor: 'border-black-200',
                iconBg: 'bg-gray-100',
                statusColor: 'text-orange-700',
                dotColor: 'bg-yellow-500'
            },
            golf: {
                id: 'golf',
                name: 'Golf',
                icon: '‚õ≥',
                bgColor: 'bg-gray-50',
                borderColor: 'border-black-200',
                iconBg: 'bg-gray-100',
                statusColor: 'text-orange-700',
                dotColor: 'bg-yellow-500'
            }
        };

        let selectedActivities = ['running', 'cycling']; // Default activities
        let currentActivityIndex = 0;
        // Activity management functions
        function updateActivityPreferences() {
            selectedActivities = [];

            // Get all checked activity checkboxes
            const activityCheckboxes = [
                'activity-running', 'activity-cycling', 'activity-walking',
                'activity-sports', 'activity-swimming', 'activity-hiking',
                'activity-tennis', 'activity-golf'
            ];

            activityCheckboxes.forEach(id => {
                const checkbox = document.getElementById(id);
                if (checkbox && checkbox.checked) {
                    selectedActivities.push(id.replace('activity-', ''));
                }
            });

            // If no activities selected, set default
            if (selectedActivities.length === 0) {
                selectedActivities = ['running', 'cycling'];
                // Also check the default checkboxes
                document.getElementById('activity-running').checked = true;
                document.getElementById('activity-cycling').checked = true;
            }

            // Update activity display
            updateActivityDisplay();
            showNotification('Activity preferences updated', 'success');
        }
        function updateHealthPreferences() {
            // Update age group
            const ageGroupRadios = document.getElementsByName('age-group');
            for (let radio of ageGroupRadios) {
                if (radio.checked) {
                    healthPreferences.ageGroup = radio.value;
                    break;
                }
            }

            // Update pregnancy status
            healthPreferences.isPregnant = document.getElementById('pregnancy-status').checked;
            healthPreferences.isBreastfeeding = document.getElementById('breastfeeding-status').checked;

            // Update health conditions
            healthPreferences.conditions = [];
            const healthConditions = [
                'health-asthma', 'health-copd', 'health-bronchitis',
                'health-sinusitis', 'health-allergies', 'health-heart-disease',
                'health-hypertension', 'health-diabetes'
            ];

            healthConditions.forEach(id => {
                const checkbox = document.getElementById(id);
                if (checkbox && checkbox.checked) {
                    // 'health-' √∂nekini kaldƒ±r ve ger√ßek condition ID'sini al
                    const conditionId = id.replace('health-', '');
                    healthPreferences.conditions.push(conditionId);
                }
            });

            console.log('Updated health preferences:', healthPreferences);

            // ‚úÖ BURAYI DEƒûƒ∞≈ûTƒ∞R: Yeni backend bildirimlerini olu≈ütur
            const currentTemp = parseInt(document.querySelector('.text-3xl.font-bold.text-blue-600').textContent) || 22;
            const currentAQI = parseInt(document.getElementById('aqiValue').textContent) || 42;
            const currentPM25 = parseInt(document.getElementById('pm25').textContent) || 12;
            const currentWind = parseInt(document.getElementById('windValue').textContent) || 12;
            const currentHumidity = parseInt(document.getElementById('humidityValue').textContent) || 68;

            // Mevcut bildirimleri temizle
            smartNotifications = [];

            // Yeni backend bildirimlerini olu≈ütur
            const backendNotifications = generateBackendNotifications(currentTemp, currentAQI, currentPM25, currentWind, currentHumidity);
            smartNotifications = [...backendNotifications];

            // G√ºnl√ºk hava durumu bildirimini de ekle
            // 1. G√ºnl√ºk hava durumu √∂zeti
            // 1. G√ºnl√ºk hava durumu √∂zeti
            const weatherSummary = generateDailyWeatherSummary(locationData, country, temp, aqi);
            if (weatherSummary) {
                notifications.push({
                    id: ++notificationIdCounter,
                    type: getNotificationTypeByAQI(aqi),
                    title: `${locationName} - Daily Weather Summary`,
                    message: weatherSummary,
                    time: currentTime,
                    read: false,
                    priority: 'medium'
                });
            }

            // Bildirimleri g√∂ster
            displaySmartNotifications(smartNotifications);

            showNotification('Health settings updated', 'success');
        }

        // Activity navigation functions
        function nextActivity() {
            const totalItems = selectedActivities.length + 1; // +1 for settings card
            currentActivityIndex = (currentActivityIndex + 1) % totalItems;
            updateActivitySlider();
        }

        function previousActivity() {
            const totalItems = selectedActivities.length + 1; // +1 for settings card
            currentActivityIndex = (currentActivityIndex - 1 + totalItems) % totalItems;
            updateActivitySlider();
        }
        function getWindTrend() {
            const trends = [
                { icon: '<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 17l9.2-9.2M17 17V7H7"></path></svg>', color: 'text-green-600' },
                { icon: '<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 7l-9.2 9.2M7 7v10h10"></path></svg>', color: 'text-red-600' },
                { icon: '<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path></svg>', color: 'text-gray-600' }
            ];
            return trends[Math.floor(Math.random() * trends.length)];
        }


        function getActivityStatus(activityId, aqi) {
            // Generate activity status based on AQI and activity type
            if (aqi <= 50) {
                const descriptions = {
                    running: 'Perfect weather conditions for running',
                    cycling: 'Ideal conditions for cycling',
                    walking: 'Great day for walking',
                    sports: 'Suitable for outdoor sports',
                    swimming: 'Clean weather for swimming',
                    hiking: 'Perfect for hiking',
                    tennis: 'Ideal conditions for playing tennis',
                    golf: 'Perfect conditions for golf'

                };
                return { status: 'Perfect', description: descriptions[activityId] || 'Suitable for activity' };
            } else if (aqi <= 100) {
                if (activityId === 'running' || activityId === 'cycling') {
                    return { status: 'Caution', description: 'Be careful during intense exercise' };
                } else if (activityId === 'walking' || activityId === 'golf') {
                    return { status: 'Suitable', description: 'No problem for light activities' };
                } else {
                    return { status: 'Moderate', description: 'Short-duration activities are recommended' };
                }
            } else {
                const warnings = {
                    running: 'Running is not recommended, exercise indoors',
                    cycling: 'Avoid cycling',
                    walking: 'Short walks, with a mask',
                    sports: 'Avoid outdoor sports',
                    swimming: 'Prefer indoor swimming pools',
                    hiking: 'Postpone hiking',
                    tennis: 'Prefer indoor courts',
                    golf: 'Postpone playing golf'

                };
                return { status: 'Not recommended', description: warnings[activityId] || 'Activity not recommended' };
            }
        }

        function updateActivityDisplay() {
            const container = document.getElementById('activityContainer');
            if (!container) return;

            const currentAQI = parseInt(document.getElementById('aqiValue').textContent) || 42;
            const currentWind = parseInt(document.getElementById('windValue').textContent) || 12;
            const currentFeelsLike = parseInt(document.getElementById('feelsLikeTemp').textContent) || 24;
            const currentTemp = parseInt(document.querySelector('.text-3xl.font-bold.text-blue-600').textContent) || 22;

            // Container'ƒ± tamamen temizle
            container.innerHTML = '';

            // Container geni≈üliƒüini ve transform'u sƒ±fƒ±rla
            container.style.width = '';
            container.style.transform = 'translateX(0px)';

            const parentContainer = container.parentElement;
            const containerWidth = parentContainer.offsetWidth;
            const totalItems = selectedActivities.length + 1; // +1 for settings card

            // Container geni≈üliƒüini doƒüru ≈üekilde ayarla
            container.style.width = `${totalItems * 100}%`;

            // Add selected activities
            selectedActivities.forEach(activityId => {
                const activity = availableActivities[activityId];
                if (!activity) return;

                const status = getActivityStatus(activityId, currentAQI);

                const activityCard = document.createElement('div');
                activityCard.className = `flex-shrink-0 h-full p-4 ${activity.bgColor} rounded-lg border ${activity.borderColor} flex flex-col justify-between`;
                activityCard.style.width = `${100 / totalItems}%`;

                activityCard.innerHTML = `
            <div class="flex items-center gap-4 mb-3">
                <div class="w-16 h-16 ${activity.iconBg} rounded-full flex items-center justify-center">
                    <span class="text-3xl">${activity.icon}</span>
                </div>
                <div class="flex-1">
                    <h4 class="text-xl font-semibold text-gray-800 mb-1">${activity.name}</h4>
                    <p class="text-sm text-gray-600 mb-2">${status.description}</p>
                    <div class="flex items-center gap-3">
                        <div class="w-4 h-4 ${activity.dotColor} rounded-full"></div>
                        <span class="text-lg font-semibold ${activity.statusColor}">${status.status}</span>
                    </div>
                </div>
            </div>
            
            <!-- Wind ve Feels like kƒ±sƒ±mlarƒ± buradan kaldƒ±rƒ±ldƒ± -->
        `;

                container.appendChild(activityCard);
            });

            // Add settings card at the end
            const settingsCard = document.createElement('div');
            settingsCard.className = 'flex-shrink-0 h-full p-4 bg-gray-50 rounded-lg border border-gray-200 flex flex-col justify-center';
            settingsCard.style.width = `${100 / totalItems}%`;

            settingsCard.innerHTML = `
        <div class="flex items-center gap-4 mb-4">
            <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center">
                <span class="text-3xl">‚öôÔ∏è</span>
            </div>
            <div class="flex-1">
                <h4 class="text-xl font-semibold text-gray-800 mb-2">Set Activity</h4>
            </div>
        </div>
        <p class="text-base text-gray-700 text-center mb-4">Which activities do you want to track?</p>
        <button onclick="showSection('settings')" class="w-full px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-lg font-medium">
            Edit Settings
        </button>
    `;

            container.appendChild(settingsCard);

            // Reset current index and update slider
            currentActivityIndex = 0;
            updateActivitySlider();
            updateActivityDots();
        }
        function updateActivitySlider() {
            const container = document.getElementById('activityContainer');
            const containerWidth = container.parentElement.offsetWidth;
            const translateX = -currentActivityIndex * (100 / (selectedActivities.length + 1)); // DEƒûƒ∞≈ûTƒ∞: Y√ºzde bazlƒ± kaydƒ±rma

            container.style.transform = `translateX(${translateX}%)`; // DEƒûƒ∞≈ûTƒ∞: Y√ºzde bazlƒ± transform
            updateActivityDots();
        }
        function updateActivityDots() {
            const dotsContainer = document.getElementById('activityDots');
            const totalItems = selectedActivities.length + 1; // +1 for settings card

            dotsContainer.innerHTML = '';

            for (let i = 0; i < totalItems; i++) {
                const dot = document.createElement('button');
                dot.className = `w-2 h-2 rounded-full transition-colors ${i === currentActivityIndex ? 'bg-blue-600' : 'bg-gray-300'}`;
                dot.onclick = () => goToActivity(i);
                dotsContainer.appendChild(dot);
            }
        }

        function goToActivity(index) {
            currentActivityIndex = index;
            updateActivitySlider();
        }
        function updateActivitySlider() {
            const container = document.getElementById('activityContainer');
            const totalItems = selectedActivities.length + 1;
            const translateX = -currentActivityIndex * (100 / totalItems); // DEƒûƒ∞≈ûTƒ∞Rƒ∞LDƒ∞

            container.style.transform = `translateX(${translateX}%)`; // DEƒûƒ∞≈ûTƒ∞Rƒ∞LDƒ∞
            updateActivityDots();
        }

        function updateActivityDots() {
            const dotsContainer = document.getElementById('activityDots');
            const totalItems = selectedActivities.length + 1; // +1 for settings card

            dotsContainer.innerHTML = '';

            for (let i = 0; i < totalItems; i++) {
                const dot = document.createElement('button');
                dot.className = `w-2 h-2 rounded-full transition-colors ${i === currentActivityIndex ? 'bg-blue-600' : 'bg-gray-300'
                    }`;
                dot.onclick = () => goToActivity(i);
                dotsContainer.appendChild(dot);
            }
        }

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function () {
            initializeMap();
            startDataUpdates();
            updateActivityDisplay(); // Initialize activity display
            updateWindAndPollenTrends(); // Initialize trends
            // ========== BURAYA EKLE ==========
            // Initialize activity preferences from checkboxes
            updateActivityPreferences();

            // Initialize health preferences
            updateHealthPreferences();
            // Generate initial smart notifications
            const initialNotifications = generateSmartNotifications(currentLocationData, 'USA', currentLocationData.temp, currentLocationData.aqi);
            smartNotifications = [...smartNotifications, ...initialNotifications];
            displaySmartNotifications(smartNotifications);

            // Add initial current location marker
            if (currentLocationData) {
                setTimeout(() => {
                    addCurrentLocationMarker(currentLocationData.lat, currentLocationData.lng, currentLocationData.name, currentLocationData);
                }, 1000);
            }
        });

        function showSearchSuggestions(query) {
            const dropdown = document.getElementById('searchSuggestions');

            if (!query || query.length < 1) {
                dropdown.classList.add('hidden');
                return;
            }

            // Sadece √ºlkeleri ve eyaletleri g√∂ster, ≈üehirleri kaldƒ±r
            const filteredCountries = northAmericanCountries.filter(country =>
                country.name.toLowerCase().includes(query.toLowerCase())
            );

            const filteredStates = northAmericanStates.filter(state =>
                state.name.toLowerCase().includes(query.toLowerCase()) ||
                state.country.toLowerCase().includes(query.toLowerCase())
            ).slice(0, 6); // Daha fazla eyalet g√∂ster

            // ≈ûehir aramasƒ±nƒ± tamamen kaldƒ±rƒ±n
            const allResults = [...filteredCountries, ...filteredStates];

            if (allResults.length === 0) {
                dropdown.classList.add('hidden');
                return;
            }

            dropdown.innerHTML = allResults.map(item => {
                if (item.type === 'country') {
                    return `
                <div class="px-4 py-3 hover:bg-blue-50 cursor-pointer border-b border-gray-100 last:border-b-0 transition-colors" 
                     onmousedown="selectLocation('${item.name}', 'country', ${item.lat}, ${item.lng}, '${item.name}', '')">
                    <div class="font-medium text-gray-800">${item.name}</div>
                    <div class="text-sm text-blue-600 font-medium">√úlke</div>
                </div>
            `;
                } else {
                    const regionType = item.type === 'state' ? 'Eyalet' : item.type === 'province' ? 'Eyalet' : 'B√∂lge';
                    return `
                <div class="px-4 py-3 hover:bg-blue-50 cursor-pointer border-b border-gray-100 last:border-b-0 transition-colors" 
                     onmousedown="selectLocation('${item.name}', '${item.type}', ${item.lat}, ${item.lng}, '${item.country}', '${item.name}')">
                    <div class="font-medium text-gray-800">${item.country}, ${item.name}</div>
                    <div class="text-sm text-green-600 font-medium">${regionType}</div>
                </div>
            `;
                }
            }).join('');

            dropdown.classList.remove('hidden');
        }
        function hideSearchSuggestions() {
            setTimeout(() => {
                document.getElementById('searchSuggestions').classList.add('hidden');
            }, 200);
        }

        function selectLocation(name, type, lat, lng, country, stateOrProvince) {
            // Create full location name for display
            let fullLocationName = name;
            if (type === 'city' && stateOrProvince) {
                fullLocationName = `${name}, ${stateOrProvince}, ${country}`;
            } else if (type === 'state' || type === 'province' || type === 'territory') {
                fullLocationName = `${name}, ${country}`;
            }

            document.getElementById('searchInput').value = fullLocationName;
            document.getElementById('searchSuggestions').classList.add('hidden');
            updateLocationData(fullLocationName, lat, lng, type, country, stateOrProvince);

            if (map) {
                let zoomLevel;
                switch (type) {
                    case 'country':
                        zoomLevel = 4;
                        break;
                    case 'state':
                    case 'province':
                    case 'territory':
                        zoomLevel = 6;
                        break;
                    case 'city':
                        zoomLevel = 12;
                        break;
                    default:
                        zoomLevel = 8;
                }

                // Force map resize and then set view
                map.invalidateSize();
                setTimeout(() => {
                    map.setView([lat, lng], zoomLevel);
                    // Show live section instead of map section
                    if (document.getElementById('homeSection').classList.contains('hidden')) {
                        showSection('home');
                    }
                }, 200);
            }
        }

        // Navigation functions
        function showSection(sectionName) {
            // Hide all sections
            document.querySelectorAll('.section').forEach(section => {
                section.classList.add('hidden');
            });

            // Show selected section
            const targetSection = document.getElementById(sectionName + 'Section');
            if (targetSection) {
                targetSection.classList.remove('hidden');
            }

            // If showing map section, resize the map
            if (sectionName === 'map' && map) {
                setTimeout(() => {
                    map.invalidateSize();
                    // Also update current location marker if exists
                    if (currentLocationData && currentLocationData.lat && currentLocationData.lng) {
                        addCurrentLocationMarker(currentLocationData.lat, currentLocationData.lng, currentLocationData.name, currentLocationData);
                    }
                }, 100);
            }

            // Update navigation buttons
            document.querySelectorAll('.nav-btn').forEach(btn => {
                btn.classList.remove('bg-white', 'bg-opacity-20');
            });

            // Close mobile menu
            document.getElementById('mobileMenu').classList.add('hidden');
        }

        function toggleMobileMenu() {
            const menu = document.getElementById('mobileMenu');
            menu.classList.toggle('hidden');
        }

        // Forecast functions

        function showForecast(type) {
            // Sadece 24-hour forecast g√∂ster
            document.getElementById('forecast24HourData').classList.remove('hidden');

            // Buton her zaman aktif g√∂r√ºns√ºn
            document.getElementById('forecast24Hour').className =
                'px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors font-medium shadow-sm';
        }
        // Map functions
        let statePolygons = [];

        function initializeMap() {
            try {
                // Wait for map container to be visible
                setTimeout(() => {
                    if (document.getElementById('map')) {
                        map = L.map('map').setView([45.0, -100.0], 4); // North America center

                        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                            attribution: '¬© OpenStreetMap contributors'
                        }).addTo(map);

                        // Force map to resize after initialization
                        setTimeout(() => {
                            if (map) {
                                map.invalidateSize();
                            }
                        }, 100);

                        // Add sample markers for North American cities
                        const sampleLocations = [
                            { lat: 40.7128, lng: -74.0060, aqi: 65, name: 'New York City', pm25: 15, pm10: 22, no2: 28, o3: 85, temp: 22 },
                            { lat: 34.0522, lng: -118.2437, aqi: 85, name: 'Los Angeles', pm25: 25, pm10: 35, no2: 35, o3: 95, temp: 28 },
                            { lat: 41.8781, lng: -87.6298, aqi: 42, name: 'Chicago', pm25: 12, pm10: 18, no2: 22, o3: 75, temp: 18 },
                            { lat: 43.6532, lng: -79.3832, aqi: 38, name: 'Toronto', pm25: 10, pm10: 15, no2: 20, o3: 70, temp: 15 },
                            { lat: 49.2827, lng: -123.1207, aqi: 32, name: 'Vancouver', pm25: 8, pm10: 12, no2: 18, o3: 65, temp: 12 },
                            { lat: 19.4326, lng: -99.1332, aqi: 125, name: 'Mexico City', pm25: 45, pm10: 65, no2: 55, o3: 120, temp: 25 }
                        ];

                        updateMapMarkers(sampleLocations);
                    }
                }, 500);
            } catch (error) {
                console.log('Map initialization failed, using fallback');
                document.getElementById('map').innerHTML = `
                    <div class="w-full h-96 bg-gradient-to-br from-blue-100 to-green-100 rounded-lg border-2 border-gray-200 flex items-center justify-center">
                        <div class="text-center">
                            <div class="text-6xl mb-4">üó∫Ô∏è</div>
                            <h3 class="text-xl font-semibold text-gray-700 mb-2">North America Map</h3>
                            <p class="text-gray-600">Air Quality Data</p>
                        </div>
                    </div>
                `;
            }
        }

        function addStatePolygons() {
            // State polygons removed - showing only city points now
        }

        function updateStatePolygons() {
            // State polygon updates removed - only city points are shown
        }

        function changeMapLayer(layer) {
            currentMapLayer = layer;

            // Update button styles
            document.querySelectorAll('[id^="layer"]').forEach(btn => {
                btn.className = 'px-4 py-2 bg-gray-200 text-gray-600 rounded-lg hover:bg-gray-300 transition-colors text-sm font-medium';
            });

            const activeBtn = document.getElementById('layer' + layer.toUpperCase().replace('25', '25').replace('10', '10'));
            if (activeBtn) {
                activeBtn.className = 'px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors text-sm font-medium';
            }

            // Update map markers with new data layer
            const sampleLocations = [
                { lat: 40.7128, lng: -74.0060, name: 'New York City', pm25: 15, pm10: 22, no2: 28, o3: 85, co: 0.8 },
                { lat: 34.0522, lng: -118.2437, name: 'Los Angeles', pm25: 25, pm10: 35, no2: 35, o3: 95, co: 1.2 },
                { lat: 41.8781, lng: -87.6298, name: 'Chicago', pm25: 12, pm10: 18, no2: 22, o3: 75, co: 0.6 },
                { lat: 43.6532, lng: -79.3832, name: 'Toronto', pm25: 10, pm10: 15, no2: 20, o3: 70, co: 0.5 },
                { lat: 49.2827, lng: -123.1207, name: 'Vancouver', pm25: 8, pm10: 12, no2: 18, o3: 65, co: 0.4 },
                { lat: 19.4326, lng: -99.1332, name: 'Mexico City', pm25: 45, pm10: 65, no2: 55, o3: 120, co: 2.1 }
            ];

            updateMapMarkers(sampleLocations);

            // Update current location marker with new layer data
            if (currentLocationData && currentLocationData.lat && currentLocationData.lng) {
                addCurrentLocationMarker(currentLocationData.lat, currentLocationData.lng, currentLocationData.name, currentLocationData);
            }
        }

        let currentLocationMarker = null;

        function updateMapMarkers(locations) {
            if (!map) return;

            // Clear existing markers (except current location marker)
            map.eachLayer(layer => {
                if (layer instanceof L.CircleMarker && layer !== currentLocationMarker) {
                    map.removeLayer(layer);
                }
            });

            locations.forEach(location => {
                let value, unit, color;

                switch (currentMapLayer) {
                    case 'pm25':
                        value = location.pm25;
                        unit = '¬µg/m¬≥';
                        color = getPollutantColor(value, 'pm25');
                        break;
                    case 'pm10':
                        value = location.pm10;
                        unit = '¬µg/m¬≥';
                        color = getPollutantColor(value, 'pm10');
                        break;
                    case 'no2':
                        value = location.no2;
                        unit = '¬µg/m¬≥';
                        color = getPollutantColor(value, 'no2');
                        break;
                    case 'o3':
                        value = location.o3;
                        unit = '¬µg/m¬≥';
                        color = getPollutantColor(value, 'o3');
                        break;
                    case 'co':
                        value = location.co;
                        unit = 'mg/m¬≥';
                        color = getPollutantColor(value, 'co');
                        break;
                    default:
                        value = location.pm25;
                        unit = '¬µg/m¬≥';
                        color = getPollutantColor(value, 'pm25');
                }

                const marker = L.circleMarker([location.lat, location.lng], {
                    radius: 15,
                    fillColor: color,
                    color: color,
                    weight: 0,
                    opacity: 0,
                    fillOpacity: 1.0
                }).addTo(map);

                marker.bindPopup(`
                    <div class="text-center">
                        <h3 class="font-bold">${location.name}</h3>
                        <p class="text-lg">${currentMapLayer.toUpperCase()}: ${value} ${unit}</p>
                        <p class="text-sm">${getStatusForValue(value, currentMapLayer)}</p>
                    </div>
                `);
            });
        }

        function addCurrentLocationMarker(lat, lng, locationName, data) {
            if (!map) return;

            // Remove existing current location marker
            if (currentLocationMarker) {
                map.removeLayer(currentLocationMarker);
            }

            // Get current layer value and color
            let value, unit, color;
            switch (currentMapLayer) {
                case 'pm25':
                    value = data.pm25;
                    unit = '¬µg/m¬≥';
                    color = getPollutantColor(value, 'pm25');
                    break;
                case 'pm10':
                    value = data.pm10;
                    unit = '¬µg/m¬≥';
                    color = getPollutantColor(value, 'pm10');
                    break;
                case 'no2':
                    value = data.no2;
                    unit = '¬µg/m¬≥';
                    color = getPollutantColor(value, 'no2');
                    break;
                case 'o3':
                    value = data.o3;
                    unit = '¬µg/m¬≥';
                    color = getPollutantColor(value, 'o3');
                    break;
                case 'co':
                    value = data.co;
                    unit = 'mg/m¬≥';
                    color = getPollutantColor(value, 'co');
                    break;
                default:
                    value = data.pm25;
                    unit = '¬µg/m¬≥';
                    color = getPollutantColor(value, 'pm25');
            }

            // Create special marker for current location (larger)
            currentLocationMarker = L.circleMarker([lat, lng], {
                radius: 20,
                fillColor: color,
                color: color,
                weight: 0,
                opacity: 0,
                fillOpacity: 1.0
            }).addTo(map);

            currentLocationMarker.bindPopup(`
                <div class="text-center">
                    <h3 class="font-bold text-blue-600">üìç ${locationName}</h3>
                    <p class="text-lg font-semibold">${currentMapLayer.toUpperCase()}: ${value} ${unit}</p>
                    <p class="text-sm">${getStatusForValue(value, currentMapLayer)}</p>
                    <p class="text-xs text-gray-500 mt-1">Selected Location</p>
                </div>
            `);
        }

        function getAQIColor(aqi) {
            if (aqi <= 50) return '#10b981';
            if (aqi <= 100) return '#f59e0b';
            if (aqi <= 150) return '#f97316';
            return '#ef4444';
        }

        function getPollutantColor(value, type) {
            // Simplified color coding for pollutants
            if (type === 'pm25') {
                if (value <= 12) return '#10b981';
                if (value <= 35) return '#f59e0b';
                return '#ef4444';
            }
            if (type === 'pm10') {
                if (value <= 20) return '#10b981';
                if (value <= 50) return '#f59e0b';
                return '#ef4444';
            }
            if (type === 'co') {
                if (value <= 1.0) return '#10b981';
                if (value <= 2.0) return '#f59e0b';
                return '#ef4444';
            }
            if (value <= 30) return '#10b981';
            if (value <= 60) return '#f59e0b';
            return '#ef4444';
        }

        function getTemperatureColor(temp) {
            if (temp <= 10) return '#3b82f6';
            if (temp <= 20) return '#10b981';
            if (temp <= 30) return '#f59e0b';
            return '#ef4444';
        }

        function getStatusForValue(value, type) {
            if (type === 'co') {
                if (value <= 1.0) return 'Low';
                if (value <= 2.0) return 'Moderate';
                return 'High';
            }
            return value <= 30 ? 'Low' : value <= 60 ? 'Moderate' : 'High';
        }

        function getAQIStatus(aqi) {
            if (aqi <= 50) return 'Good';
            if (aqi <= 100) return 'Moderate';
            if (aqi <= 150) return 'Unhealthy';
            return 'Hazardous';
        }

        // Global variable to store current location data
        // Varsayƒ±lan konumu bir ≈üehir yerine √ºlke veya eyalet yapƒ±n
        let currentLocationData = {
            name: 'State of New York, USA', // ≈ûehir yerine eyalet
            lat: 42.1657, // New York eyaleti koordinatlarƒ±
            lng: -74.9481,
            aqi: 42,
            pm25: 12,
            pm10: 18,
            no2: 25,
            o3: 85,
            co: 0.8,
            temp: 22
        };

        // Health preferences
        let healthPreferences = {
            ageGroup: 'adult',
            isPregnant: false,
            isBreastfeeding: false,
            conditions: []
        };

        // Smart notifications system
        let smartNotifications = [];
        let notificationIdCounter = Date.now();

        // Search and location functions
        function searchLocation() {
            const query = document.getElementById('searchInput').value;
            if (query) {
                showNotification(`Searching for "${query}"...`, 'info');
                setTimeout(() => {
                    updateLocationData(query);
                    showNotification('Location updated', 'success');
                }, 1000);
            }
        }

        function getCurrentLocation() {
            if (navigator.geolocation) {
                showNotification('Location fetching..', 'info');
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const lat = position.coords.latitude;
                        const lng = position.coords.longitude;

                        // Kuzey Amerika sƒ±nƒ±rlarƒ± kontrol√º
                        const isInNorthAmerica = (
                            lat >= 14.0 && lat <= 83.0 && // Enlem: Mexican g√ºneyinden Canada kuzeyine
                            lng >= -168.0 && lng <= -52.0  // Boylam: Alaska batƒ±sƒ±ndan Newfoundland doƒüusuna
                        );

                        if (!isInNorthAmerica) {
                            showNotification('The system is not working in your location. Only North America is supported.', 'warning');
                            return;
                        }

                        const locationName = `Current Location (${lat.toFixed(4)}, ${lng.toFixed(4)})`;
                        updateLocationData(locationName, lat, lng, 'current', 'Unknown', '');
                        showNotification('Location successfully retrieved', 'success');

                        if (map) {
                            map.setView([lat, lng], 12);
                        }
                    },
                    (error) => {
                        showNotification('Location could not be obtained', 'error');
                    }
                );
            } else {
                showNotification('Your browser does not support location services', 'error');
            }
        }

        function updateLocationData(location, lat, lng, type, country, stateOrProvince) {
            document.getElementById('currentLocation').textContent = `üìç ${location}`;

            // Generate realistic data based on location and region
            let newAQI, pm25, pm10, no2, o3, co, humidity, wind, precipitation, pressure, temp;
            let weatherDescription, weatherIcon;

            // Regional data patterns based on country and specific locations
            if (country === 'USA') {
                if (location.includes('Los Angeles') || location.includes('California')) {
                    // California - high pollution, warm weather
                    newAQI = Math.floor(Math.random() * 40) + 60; // 60-100
                    pm25 = Math.floor(Math.random() * 15) + 20; // 20-35
                    pm10 = Math.floor(Math.random() * 20) + 30; // 30-50
                    no2 = Math.floor(Math.random() * 15) + 30; // 30-45
                    o3 = Math.floor(Math.random() * 30) + 80; // 80-110
                    temp = Math.floor(Math.random() * 8) + 22; // 22-30¬∞C
                    humidity = Math.floor(Math.random() * 20) + 45; // 45-65%
                    weatherDescription = 'Sunny';
                    weatherIcon = '‚òÄÔ∏è';
                } else if (location.includes('New York') || location.includes('Chicago') || location.includes('Boston')) {
                    // Northeast/Midwest - moderate pollution, cooler
                    newAQI = Math.floor(Math.random() * 35) + 35; // 35-70
                    pm25 = Math.floor(Math.random() * 12) + 10; // 10-22
                    pm10 = Math.floor(Math.random() * 15) + 15; // 15-30
                    no2 = Math.floor(Math.random() * 12) + 20; // 20-32
                    o3 = Math.floor(Math.random() * 25) + 65; // 65-90
                    temp = Math.floor(Math.random() * 10) + 15; // 15-25¬∞C
                    humidity = Math.floor(Math.random() * 25) + 55; // 55-80%
                    weatherDescription = 'Party Cloudy';
                    weatherIcon = '‚õÖ';
                } else if (location.includes('Seattle') || location.includes('Portland') || location.includes('Washington')) {
                    // Pacific Northwest - clean air, rainy
                    newAQI = Math.floor(Math.random() * 25) + 25; // 25-50
                    pm25 = Math.floor(Math.random() * 8) + 5; // 5-13
                    pm10 = Math.floor(Math.random() * 10) + 8; // 8-18
                    no2 = Math.floor(Math.random() * 10) + 15; // 15-25
                    o3 = Math.floor(Math.random() * 20) + 50; // 50-70
                    temp = Math.floor(Math.random() * 8) + 8; // 8-16¬∞C
                    humidity = Math.floor(Math.random() * 20) + 70; // 70-90%
                    weatherDescription = 'Rainy';
                    weatherIcon = 'üåßÔ∏è';
                } else if (location.includes('Texas') || location.includes('Houston') || location.includes('Dallas')) {
                    // Texas - hot, moderate pollution
                    newAQI = Math.floor(Math.random() * 30) + 45; // 45-75
                    pm25 = Math.floor(Math.random() * 15) + 12; // 12-27
                    pm10 = Math.floor(Math.random() * 18) + 18; // 18-36
                    no2 = Math.floor(Math.random() * 15) + 25; // 25-40
                    o3 = Math.floor(Math.random() * 35) + 75; // 75-110
                    temp = Math.floor(Math.random() * 10) + 25; // 25-35¬∞C
                    humidity = Math.floor(Math.random() * 30) + 60; // 60-90%
                    weatherDescription = 'Hot and humid';
                    weatherIcon = 'üå§Ô∏è';
                } else {
                    // Other US states - average values
                    newAQI = Math.floor(Math.random() * 40) + 35; // 35-75
                    pm25 = Math.floor(Math.random() * 15) + 8; // 8-23
                    pm10 = Math.floor(Math.random() * 20) + 12; // 12-32
                    no2 = Math.floor(Math.random() * 15) + 18; // 18-33
                    o3 = Math.floor(Math.random() * 30) + 60; // 60-90
                    temp = Math.floor(Math.random() * 12) + 16; // 16-28¬∞C
                    humidity = Math.floor(Math.random() * 30) + 50; // 50-80%
                    weatherDescription = 'Variable';
                    weatherIcon = '‚õÖ';
                }
            } else if (country === 'Canada') {
                if (location.includes('Vancouver') || location.includes('British Columbia')) {
                    // BC - very clean air, mild and wet
                    newAQI = Math.floor(Math.random() * 25) + 20; // 20-45
                    pm25 = Math.floor(Math.random() * 6) + 4; // 4-10
                    pm10 = Math.floor(Math.random() * 8) + 6; // 6-14
                    no2 = Math.floor(Math.random() * 8) + 12; // 12-20
                    o3 = Math.floor(Math.random() * 15) + 45; // 45-60
                    temp = Math.floor(Math.random() * 8) + 8; // 8-16¬∞C
                    humidity = Math.floor(Math.random() * 15) + 75; // 75-90%
                    weatherDescription = 'Foggy';
                    weatherIcon = 'üå´Ô∏è';
                } else if (location.includes('Toronto') || location.includes('Ontario')) {
                    // Ontario - moderate, continental climate
                    newAQI = Math.floor(Math.random() * 30) + 30; // 30-60
                    pm25 = Math.floor(Math.random() * 10) + 8; // 8-18
                    pm10 = Math.floor(Math.random() * 12) + 12; // 12-24
                    no2 = Math.floor(Math.random() * 12) + 18; // 18-30
                    o3 = Math.floor(Math.random() * 20) + 55; // 55-75
                    temp = Math.floor(Math.random() * 10) + 12; // 12-22¬∞C
                    humidity = Math.floor(Math.random() * 25) + 60; // 60-85%
                    weatherDescription = 'Cool';
                    weatherIcon = '‚òÅÔ∏è';
                } else if (location.includes('Calgary') || location.includes('Alberta')) {
                    // Alberta - dry, cold, some pollution from oil
                    newAQI = Math.floor(Math.random() * 35) + 35; // 35-70
                    pm25 = Math.floor(Math.random() * 12) + 10; // 10-22
                    pm10 = Math.floor(Math.random() * 15) + 15; // 15-30
                    no2 = Math.floor(Math.random() * 15) + 20; // 20-35
                    o3 = Math.floor(Math.random() * 25) + 60; // 60-85
                    temp = Math.floor(Math.random() * 12) + 5; // 5-17¬∞C
                    humidity = Math.floor(Math.random() * 20) + 40; // 40-60%
                    weatherDescription = 'Cold and dry';
                    weatherIcon = '‚ùÑÔ∏è';
                } else {
                    // Other Canadian provinces - clean and cold
                    newAQI = Math.floor(Math.random() * 25) + 25; // 25-50
                    pm25 = Math.floor(Math.random() * 8) + 6; // 6-14
                    pm10 = Math.floor(Math.random() * 10) + 10; // 10-20
                    no2 = Math.floor(Math.random() * 10) + 15; // 15-25
                    o3 = Math.floor(Math.random() * 20) + 50; // 50-70
                    temp = Math.floor(Math.random() * 10) + 8; // 8-18¬∞C
                    humidity = Math.floor(Math.random() * 25) + 65; // 65-90%
                    weatherDescription = 'Cold';
                    weatherIcon = 'üå®Ô∏è';
                }
            } else if (country === 'Mexican') {
                if (location.includes('Mexico City')) {
                    // Mexico City - very high pollution, high altitude
                    newAQI = Math.floor(Math.random() * 50) + 90; // 90-140
                    pm25 = Math.floor(Math.random() * 25) + 35; // 35-60
                    pm10 = Math.floor(Math.random() * 30) + 50; // 50-80
                    no2 = Math.floor(Math.random() * 25) + 45; // 45-70
                    o3 = Math.floor(Math.random() * 40) + 100; // 100-140
                    temp = Math.floor(Math.random() * 6) + 20; // 20-26¬∞C
                    humidity = Math.floor(Math.random() * 20) + 50; // 50-70%
                    weatherDescription = 'Foggy and polluted';
                    weatherIcon = 'üå´Ô∏è';
                } else if (location.includes('Tijuana') || location.includes('Baja California')) {
                    // Baja California - moderate pollution, dry
                    newAQI = Math.floor(Math.random() * 35) + 50; // 50-85
                    pm25 = Math.floor(Math.random() * 18) + 18; // 18-36
                    pm10 = Math.floor(Math.random() * 22) + 25; // 25-47
                    no2 = Math.floor(Math.random() * 18) + 25; // 25-43
                    o3 = Math.floor(Math.random() * 30) + 70; // 70-100
                    temp = Math.floor(Math.random() * 8) + 22; // 22-30¬∞C
                    humidity = Math.floor(Math.random() * 20) + 45; // 45-65%
                    weatherDescription = 'Hot and dry';
                    weatherIcon = '‚òÄÔ∏è';
                } else {
                    // Other Mexican states - warm, moderate pollution
                    newAQI = Math.floor(Math.random() * 40) + 55; // 55-95
                    pm25 = Math.floor(Math.random() * 20) + 20; // 20-40
                    pm10 = Math.floor(Math.random() * 25) + 30; // 30-55
                    no2 = Math.floor(Math.random() * 20) + 30; // 30-50
                    o3 = Math.floor(Math.random() * 35) + 80; // 80-115
                    temp = Math.floor(Math.random() * 8) + 24; // 24-32¬∞C
                    humidity = Math.floor(Math.random() * 30) + 55; // 55-85%
                    weatherDescription = 'Hot';
                    weatherIcon = 'üå§Ô∏è';
                }
            } else {
                // Default values for unknown locations
                newAQI = Math.floor(Math.random() * 50) + 40; // 40-90
                pm25 = Math.floor(Math.random() * 20) + 10; // 10-30
                pm10 = Math.floor(Math.random() * 25) + 15; // 15-40
                no2 = Math.floor(Math.random() * 20) + 20; // 20-40
                o3 = Math.floor(Math.random() * 35) + 65; // 65-100
                temp = Math.floor(Math.random() * 12) + 18; // 18-30¬∞C
                humidity = Math.floor(Math.random() * 30) + 55; // 55-85%
                weatherDescription = 'Variable';
                weatherIcon = '‚õÖ';
            }

            // Common calculations for all locations
            co = (Math.random() * 1.5 + 0.3).toFixed(1); // 0.3-1.8 mg/m¬≥
            wind = Math.floor(Math.random() * 15) + 5; // 5-20 km/h
            precipitation = (Math.random() * 5).toFixed(1); // 0-5mm
            pressure = Math.floor(Math.random() * 40) + 995; // 995-1035 hPa

            const feelsLikeTemp = calculateFeelsLike(temp, humidity, wind);

            // SADECE BULUTLULUK HESAPLAMA
            const cloudiness = Math.floor(Math.random() * 100); // 0-100% arasƒ±

            // Bulutluluk deƒüerini g√ºncelle
            document.getElementById('cloudinessValue').textContent = cloudiness + '%';

            // Bulutluluk durumunu belirle
            let cloudinessDescription = '';
            if (cloudiness < 20) cloudinessDescription = 'Clear';
            else if (cloudiness < 50) cloudinessDescription = 'Partly cloudy';
            else if (cloudiness < 80) cloudinessDescription = 'Cloudy';
            else cloudinessDescription = 'Overcast';

            // A√ßƒ±klamayƒ± g√ºncelle
            document.querySelector('#cloudinessValue + .text-sm.text-gray-600').textContent = cloudinessDescription;

            // Update all displays
            updateAQIDisplay(newAQI);
            document.getElementById('pm25').textContent = pm25;
            document.getElementById('pm10').textContent = pm10;
            document.getElementById('no2').textContent = no2;
            document.getElementById('o3').textContent = o3;
            document.getElementById('co').textContent = co;

            // Update weather data
            document.querySelector('.text-3xl.font-bold.text-blue-600').textContent = temp + '¬∞C';
            document.getElementById('humidityValue').textContent = humidity + '%';
            document.getElementById('windValue').textContent = wind + ' km/h';
            document.getElementById('precipitationValue').textContent = precipitation + 'mm';
            document.getElementById('pressureValue').textContent = pressure;
            document.getElementById('feelsLikeTemp').textContent = feelsLikeTemp + '¬∞C';

            // Update weather description
            const weatherElements = document.querySelectorAll('.text-sm.text-gray-600');
            weatherElements.forEach(element => {
                if (element.textContent === 'Party Cloudy') {
                    element.textContent = weatherDescription;
                }
            });

            // Update current location data for map
            currentLocationData = {
                name: location,
                lat: lat || 40.7128,
                lng: lng || -74.0060,
                aqi: newAQI,
                pm25: pm25,
                pm10: pm10,
                no2: no2,
                o3: o3,
                co: parseFloat(co),
                temp: temp
            };

            // Add current location marker to map
            if (lat && lng) {
                addCurrentLocationMarker(lat, lng, location, currentLocationData);
            }

            // Update all forecast data to match the region
            updateForecastData(country, stateOrProvince, temp, newAQI);

            // Clear existing notifications and generate new ones based on new location
            smartNotifications = [];

            // Generate and display smart notifications for new location
            const newNotifications = generateSmartNotifications(currentLocationData, country, temp, newAQI);
            smartNotifications = [...smartNotifications, ...newNotifications];

            // Also generate health-based notifications for new location
            const healthNotifications = generateHealthBasedNotifications();
            smartNotifications = [...smartNotifications, ...healthNotifications];

            displaySmartNotifications(smartNotifications);

            showNotification(`Data for ${location} has been updated`, 'success');
        }

        // Function to update forecast data based on region
        function updateForecastData(country, stateOrProvince, baseTemp, baseAQI) {
            // SADECE 24-hour forecast g√ºncelleme
            const hourlyRows = document.querySelectorAll('#forecast24HourData tbody tr');

            hourlyRows.forEach((row, index) => {
                const tempCell = row.querySelector('.font-bold');
                const humidityCell = row.querySelector('.text-cyan-600');
                const windCell = row.querySelector('.text-violet-600');

                if (tempCell) {
                    // Hourly temperature variation (smaller changes)
                    let hourlyTemp = baseTemp + Math.floor(Math.random() * 6) - 3;

                    // Regional adjustments
                    if (country === 'Canada') {
                        hourlyTemp = Math.max(hourlyTemp - 3, -10);
                    } else if (country === 'Mexican') {
                        hourlyTemp = Math.min(hourlyTemp + 2, 38);
                    }

                    tempCell.textContent = `${hourlyTemp}¬∞C`;
                }

                if (humidityCell) {
                    let humidity = Math.floor(Math.random() * 25) + 55;
                    if (country === 'Canada') humidity += 10;
                    humidityCell.textContent = `${Math.min(95, humidity)}%`;
                }

                if (windCell) {
                    let wind = Math.floor(Math.random() * 12) + 5;
                    windCell.textContent = `${wind} km/h`;
                }
            });
        }
        // Update 24-hour forecast table
        const hourlyRows = document.querySelectorAll('#forecast24HourData tbody tr');

        hourlyRows.forEach((row, index) => {
            const tempCell = row.querySelector('.font-bold');
            const humidityCell = row.querySelector('.text-cyan-600');
            const windCell = row.querySelector('.text-violet-600');

            if (tempCell) {
                // Hourly temperature variation (smaller changes)
                let hourlyTemp = baseTemp + Math.floor(Math.random() * 6) - 3;

                // Regional adjustments
                if (country === 'Canada') {
                    hourlyTemp = Math.max(hourlyTemp - 3, -10);
                } else if (country === 'Mexican') {
                    hourlyTemp = Math.min(hourlyTemp + 2, 38);
                }

                tempCell.textContent = `${hourlyTemp}¬∞C`;
            }

            if (humidityCell) {
                let humidity = Math.floor(Math.random() * 25) + 55;
                if (country === 'Canada') humidity += 10;
                humidityCell.textContent = `${Math.min(95, humidity)}%`;
            }

            if (windCell) {
                let wind = Math.floor(Math.random() * 12) + 5;
                windCell.textContent = `${wind} km/h`;
            }
        });


        function getAQIColorClass(aqi) {
            if (aqi <= 50) return 'text-green-600';
            if (aqi <= 100) return 'text-yellow-600';
            if (aqi <= 150) return 'text-orange-600';
            return 'text-red-600';
        }

        function updateAQIDisplay(aqi) {
            document.getElementById('aqiValue').textContent = aqi;
            document.getElementById('aqiStatus').textContent = getAQIStatus(aqi);

            const circle = document.getElementById('aqiCircle');
            const value = document.getElementById('aqiValue');
            const status = document.getElementById('aqiStatus');

            // Remove all AQI classes
            circle.className = circle.className.replace(/air-quality-\w+/g, '');

            // Add appropriate class and update colors
            if (aqi <= 50) {
                circle.classList.add('air-quality-good');
                value.className = 'text-6xl font-bold text-emerald-600';
                status.className = 'text-xl font-semibold text-emerald-600';
                circle.innerHTML = '<div class="text-center"><div class="text-2xl"></div><div class="text-xs"></div></div>';
            } else if (aqi <= 100) {
                circle.classList.add('air-quality-moderate');
                value.className = 'text-6xl font-bold text-amber-600';
                status.className = 'text-xl font-semibold text-amber-600';
                circle.innerHTML = '<div class="text-center"><div class="text-2xl"></div><div class="text-xs"></div></div>';
            } else if (aqi <= 150) {
                circle.classList.add('air-quality-unhealthy');
                value.className = 'text-6xl font-bold text-red-600';
                status.className = 'text-xl font-semibold text-red-600';
                circle.innerHTML = '<div class="text-center"><div class="text-2xl"></div><div class="text-xs"></div></div>';
            } else {
                circle.classList.add('air-quality-very-unhealthy');
                value.className = 'text-6xl font-bold text-violet-600';
                status.className = 'text-xl font-semibold text-violet-600';
                circle.innerHTML = '<div class="text-center"><div class="text-2xl"></div><div class="text-xs"></div></div>';
            }

            // Update activity display when AQI changes
            updateActivityDisplay();
        }

        // Notification system
        function showNotification(message, type = 'info') {
            const container = document.getElementById('notificationContainer');
            const notification = document.createElement('div');

            const colors = {
                success: 'bg-green-500',
                error: 'bg-red-500',
                warning: 'bg-yellow-500',
                info: 'bg-blue-500'
            };

            notification.className = `${colors[type]} text-white px-6 py-3 rounded-lg shadow-lg notification-slide`;
            notification.textContent = message;

            container.appendChild(notification);

            setTimeout(() => {
                notification.remove();
            }, 3000);
        }
        function displayNotifications() {
            const container = document.getElementById('notificationContainer');
            if (!container) return;

            container.innerHTML = '';

            smartNotifications.forEach(notification => {
                if (!notification.read) {
                    const notificationElement = document.createElement('div');
                    notificationElement.className = `bg-${getNotificationColor(notification.type)}-100 border border-${getNotificationColor(notification.type)}-300 rounded-lg p-4 mb-2`;
                    notificationElement.innerHTML = `
                <div class="flex justify-between items-start">
                    <div>
                        <h4 class="font-semibold text-${getNotificationColor(notification.type)}-800">${notification.title}</h4>
                        <p class="text-sm text-${getNotificationColor(notification.type)}-600 mt-1">${notification.message}</p>
                    </div>
                    <button onclick="markNotificationAsRead(${notification.id})" class="text-${getNotificationColor(notification.type)}-500 hover:text-${getNotificationColor(notification.type)}-700">
                        √ó
                    </button>
                </div>
                <div class="text-xs text-${getNotificationColor(notification.type)}-500 mt-2">${formatTime(notification.time)}</div>
            `;
                    container.appendChild(notificationElement);
                }
            });
        }

        function getNotificationColor(type) {
            const colors = {
                success: 'green',
                error: 'red',
                warning: 'yellow',
                info: 'blue'
            };
            return colors[type] || 'blue';
        }

        function formatTime(time) {
            return time.toLocaleTimeString('tr-TR', {
                hour: '2-digit',
                minute: '2-digit'
            });
        }
        function generateSmartNotifications(locationData, country, temp, aqi) {
            const notifications = [];
            const currentTime = new Date();

            if (!locationData || !locationData.name) {
                return notifications;
            }

            const locationName = locationData.name;
            const pm25 = locationData.pm25 || 12;
            const wind = parseInt(document.getElementById('windValue').textContent) || 12;
            const humidity = parseInt(document.getElementById('humidityValue').textContent) || 68;

            // 1. G√ºnl√ºk hava durumu √∂zeti - ƒ∞LK SIRAYA AL
            const weatherSummary = generateDailyWeatherSummary(locationData, country, temp, aqi);
            if (weatherSummary) {
                notifications.push({
                    id: ++notificationIdCounter,
                    type: getNotificationTypeByAQI(aqi),
                    title: `${locationName} - Daily Weather Summary`,
                    message: weatherSummary,
                    time: currentTime,
                    read: false,
                    priority: 'medium'
                });
            }

            // 2. BACKEND Bƒ∞LDƒ∞Rƒ∞MLERƒ∞Nƒ∞ EKLE - ƒ∞Kƒ∞NCƒ∞ SIRAYA AL
            const backendNotifications = generateBackendNotifications(temp, aqi, pm25, wind, humidity);
            notifications.push(...backendNotifications);

            // 3. Ekstra hava kalitesi bildirimleri
            if (aqi > 150) {
                notifications.push({
                    id: ++notificationIdCounter,
                    type: 'error',
                    title: `${locationName} - Hazardous Air Quality`,
                    message: 'Air quality is at dangerous levels! Stay indoors, avoid going outside.',
                    time: currentTime,
                    read: false,
                    priority: 'high'
                });
            } else if (aqi > 100) {
                notifications.push({
                    id: ++notificationIdCounter,
                    type: 'warning',
                    title: `${locationName} - Poor Air Quality`,
                    message: 'Air quality is poor. Wear a mask when going outside.',
                    time: currentTime,
                    read: false,
                    priority: 'high'
                });
            }
            return notifications;
        }

        function getNotificationTypeByAQI(aqi) {
            if (aqi <= 50) return 'success';
            if (aqi <= 100) return 'info';
            if (aqi <= 150) return 'warning';
            return 'error';
        }

        function generateDailyWeatherSummary(locationData, country, temp, aqi) {
            const currentHour = new Date().getHours();
            const humidity = parseInt(document.getElementById('humidityValue').textContent) || 68;
            const wind = parseInt(document.getElementById('windValue').textContent) || 12;
            const currentFeelsLike = parseInt(document.getElementById('feelsLikeTemp').textContent) || 24;

            let summary = '';
            let weatherCondition = '';
            let weatherIcon = '';

            if (temp >= 25 && humidity < 60 && aqi < 80) {
                weatherCondition = 'sunny';
                weatherIcon = '‚òÄÔ∏è';
            } else if (temp >= 20 && temp < 25 && humidity < 70) {
                weatherCondition = 'partly cloudy';
                weatherIcon = '‚õÖ';
            } else if (humidity > 80 || temp < 15) {
                weatherCondition = 'cloudy';
                weatherIcon = '‚òÅÔ∏è';
            } else if (humidity > 85) {
                weatherCondition = 'rainy';
                weatherIcon = 'üåßÔ∏è';
            } else {
                weatherCondition = 'variable';
                weatherIcon = 'üå§Ô∏è';
            }

            let timeOfDay = '';
            if (currentHour >= 6 && currentHour < 12) {
                timeOfDay = 'morning';
            } else if (currentHour >= 12 && currentHour < 18) {
                timeOfDay = 'afternoon';
            } else if (currentHour >= 18 && currentHour < 22) {
                timeOfDay = 'evening';
            } else {
                timeOfDay = 'night';
            }

            // Get location name (country or state)
            const locationName = locationData.name || 'Unknown Location';

            summary = `${weatherIcon} ${locationName} - Today ${timeOfDay}, the weather is expected to be ${weatherCondition}. `;
            summary += `Temperature ${temp}¬∞C, humidity ${humidity}%, wind ${wind} km/h. `;
            summary += `Feels like ${currentFeelsLike}¬∞C. `;

            if (aqi <= 50) {
                summary += 'Air quality is excellent, ideal for outdoor activities.';
            } else if (aqi <= 100) {
                summary += 'Air quality is moderate.';
            } else {
                summary += 'Air quality is poor, take caution.';
            }

            return summary;
        }

        function generateHealthBasedNotifications() {
            const notifications = [];
            const currentTime = new Date();
            const currentAQI = parseInt(document.getElementById('aqiValue').textContent) || 42;

            const currentTemp = parseInt(document.querySelector('.text-3xl.font-bold.text-blue-600').textContent) || 22;
            const currentHumidity = parseInt(document.getElementById('humidityValue').textContent) || 68;

            // Generate UV index based on temperature and time
            const currentHour = new Date().getHours();
            let uvIndex = 0;
            if (currentHour >= 10 && currentHour <= 16) {
                // Peak UV hours
                if (currentTemp >= 30) {
                    uvIndex = Math.floor(Math.random() * 4) + 7; // 7-10 (very high)
                } else if (currentTemp >= 25) {
                    uvIndex = Math.floor(Math.random() * 3) + 5; // 5-7 (high)
                } else if (currentTemp >= 20) {
                    uvIndex = Math.floor(Math.random() * 3) + 3; // 3-5 (moderate)
                } else {
                    uvIndex = Math.floor(Math.random() * 3) + 1; // 1-3 (low)
                }
            } else if (currentHour >= 8 && currentHour <= 18) {
                // Moderate UV hours
                uvIndex = Math.max(1, Math.floor(uvIndex * 0.7));
            } else {
                // Low/no UV hours
                uvIndex = 0;
            }

            console.log('Generating health notifications:', {
                ageGroup: healthPreferences.ageGroup,
                isPregnant: healthPreferences.isPregnant,
                conditions: healthPreferences.conditions,
                currentAQI: currentAQI,
                currentTemp: currentTemp,
                currentHumidity: currentHumidity,
                uvIndex: uvIndex
            });

            // UV Index notifications
            // UV Index notifications
            if (uvIndex > 6) {
                notifications.push({
                    id: ++notificationIdCounter,
                    type: 'warning',
                    title: `${locationName} - High UV Index`,
                    message: `UV index ${uvIndex}! UV radiation is high! Avoid staying outdoors for long and use protection.`,
                    time: currentTime,
                    read: false,
                    priority: 'high'
                });
            }

            // Temperature-based notifications
            if (currentTemp >= 35) {
                notifications.push({
                    id: ++notificationIdCounter,
                    type: 'error',
                    title: `${locationName} - Extreme Heat Warning`,
                    message: `The weather is very hot (${currentTemp}¬∞C)! Stay indoors, drink plenty of water, and stay in the shade.`,
                    time: currentTime,
                    read: false,
                    priority: 'high'
                });
            } else if (currentTemp >= 30) {
                notifications.push({
                    id: ++notificationIdCounter,
                    type: 'warning',
                    title: `${locationName} - Hot Weather Alert`,
                    message: `The weather is hot (${currentTemp}¬∞C), drink plenty of water and stay in the shade.`,
                    time: currentTime,
                    read: false,
                    priority: 'medium'
                });
            }
            // Humidity notifications
            const locationName = currentLocationData.name || 'Current Location';
            if (currentHumidity > 80) {
                notifications.push({
                    id: ++notificationIdCounter,
                    type: 'warning',
                    title: `${locationName} - High Humidity`,
                    message: `Humidity is high (%${currentHumidity})! Risk of mold and mildew may increase, be careful.`,
                    time: currentTime,
                    read: false,
                    priority: 'medium'
                });
            } else if (currentHumidity < 30) {
                notifications.push({
                    id: ++notificationIdCounter,
                    type: 'warning',
                    title: `${locationName} - Very Low Humidity`,
                    message: `Air is dry (%${currentHumidity})! Skin and respiratory system may be affected, drink plenty of water.`,
                    time: currentTime,
                    read: false,
                    priority: 'medium'
                });
            }
            // Ya≈ülƒ±lar (65+) i√ßin uyarƒ±lar
            if (healthPreferences.ageGroup === 'elderly') {
                if (currentAQI >= 201) {
                    notifications.push({
                        id: ++notificationIdCounter,
                        type: 'error',
                        title: 'Seniors (65+) - Hazardous Weather',
                        message: 'Weather is hazardous! Stay indoors and avoid going outside unless necessary.',
                        time: currentTime,
                        read: false,
                        priority: 'high'
                    });
                } else if (currentAQI >= 151) {
                    notifications.push({
                        id: ++notificationIdCounter,
                        type: 'warning',
                        title: 'Seniors (65+) - Very Unhealthy Air',
                        message: 'Air quality is very unhealthy! Seniors should stay indoors if possible.',
                        time: currentTime,
                        read: false,
                        priority: 'high'
                    });
                } else if (currentAQI >= 101) {
                    notifications.push({
                        id: ++notificationIdCounter,
                        type: 'warning',
                        title: 'Seniors (65+) - Unhealthy Air',
                        message: 'Air quality is unhealthy! Seniors (65+) should be cautious outdoors.',
                        time: currentTime,
                        read: false,
                        priority: 'high'
                    });
                }

                if (currentTemp >= 30 && currentTemp <= 35) {
                    notifications.push({
                        id: ++notificationIdCounter,
                        type: 'warning',
                        title: 'Seniors (65+) - Hot Weather',
                        message: 'Hot weather is risky for seniors! Drink plenty of water and stay in the shade.',
                        time: currentTime,
                        read: false,
                        priority: 'medium'
                    });
                }
            }

            // Hamileler i√ßin uyarƒ±lar
            if (healthPreferences.isPregnant) {
                if (currentAQI >= 201) {
                    notifications.push({
                        id: ++notificationIdCounter,
                        type: 'error',
                        title: 'Pregnant Women - Hazardous Weather',
                        message: 'Weather is hazardous! Stay indoors and avoid going outside unless necessary.',
                        time: currentTime,
                        read: false,
                        priority: 'high'
                    });
                } else if (currentAQI >= 151) {
                    notifications.push({
                        id: ++notificationIdCounter,
                        type: 'warning',
                        title: 'Pregnant Women - Very Unhealthy Air',
                        message: 'Air quality is very unhealthy! Pregnant women should stay indoors if possible.',
                        time: currentTime,
                        read: false,
                        priority: 'high'
                    });
                } else if (currentAQI >= 101) {
                    notifications.push({
                        id: ++notificationIdCounter,
                        type: 'warning',
                        title: 'Pregnant Women - Unhealthy Air',
                        message: 'Air quality is unhealthy! Pregnant women should be cautious outdoors.',
                        time: currentTime,
                        read: false,
                        priority: 'high'
                    });
                }

                if (currentTemp >= 35 && currentHumidity > 80) {
                    notifications.push({
                        id: ++notificationIdCounter,
                        type: 'warning',
                        title: 'Pregnant Women - Hot and Humid Weather',
                        message: 'Temperature and humidity are high! Pregnant women should stay indoors and drink plenty of water.',
                        time: currentTime,
                        read: false,
                        priority: 'high'
                    });
                }
            }

            // Hastalƒ±k durumlarƒ±na g√∂re uyarƒ±lar
            healthPreferences.conditions.forEach(condition => {
                switch (condition) {
                    case 'asthma':
                        if (currentAQI >= 201) {
                            notifications.push({
                                id: ++notificationIdCounter,
                                type: 'error',
                                title: 'Asthma - Hazardous Air',
                                message: 'AQI is hazardous! Stay indoors and avoid going outside unless necessary.',
                                time: currentTime,
                                read: false,
                                priority: 'high'
                            });
                        } else if (currentAQI >= 151) {
                            notifications.push({
                                id: ++notificationIdCounter,
                                type: 'warning',
                                title: 'Asthma - Very High AQI',
                                message: 'AQI is very high! Asthma patients should stay indoors.',
                                time: currentTime,
                                read: false,
                                priority: 'high'
                            });
                        } else if (currentAQI >= 101) {
                            notifications.push({
                                id: ++notificationIdCounter,
                                type: 'warning',
                                title: 'Asthma - High AQI',
                                message: 'AQI is high! Risky for asthma, avoid staying outdoors for long periods.',
                                time: currentTime,
                                read: false,
                                priority: 'high'
                            });
                        }
                        break;

                    case 'copd':
                        if (currentAQI >= 201) {
                            notifications.push({
                                id: ++notificationIdCounter,
                                type: 'error',
                                title: 'COPD / Respiratory Issues - Hazardous Air',
                                message: 'Air quality is very unhealthy! Stay indoors and avoid going outside unless necessary.',
                                time: currentTime,
                                read: false,
                                priority: 'high'
                            });
                        } else if (currentAQI >= 151) {
                            notifications.push({
                                id: ++notificationIdCounter,
                                type: 'warning',
                                title: 'COPD / Respiratory Issues - Very Unhealthy Air',
                                message: 'Air quality is very unhealthy, high risk for respiratory issues, do not go outside.',
                                time: currentTime,
                                read: false,
                                priority: 'high'
                            });
                        } else if (currentAQI >= 101) {
                            notifications.push({
                                id: ++notificationIdCounter,
                                type: 'warning',
                                title: 'COPD / Respiratory Issues - Unhealthy Air',
                                message: 'Air quality is unhealthy, COPD patients should be cautious.',
                                time: currentTime,
                                read: false,
                                priority: 'high'
                            });
                        }
                        break;

                    case 'bronchitis':
                        if (currentAQI >= 201) {
                            notifications.push({
                                id: ++notificationIdCounter,
                                type: 'error',
                                title: 'Chronic Bronchitis - Hazardous Air',
                                message: 'Air is hazardous! Stay indoors and avoid going outside unless necessary.',
                                time: currentTime,
                                read: false,
                                priority: 'high'
                            });
                        } else if (currentAQI >= 151) {
                            notifications.push({
                                id: ++notificationIdCounter,
                                type: 'warning',
                                title: 'Chronic Bronchitis - Very Unhealthy Air',
                                message: 'Air quality is very unhealthy! Chronic respiratory patients should stay indoors if possible.',
                                time: currentTime,
                                read: false,
                                priority: 'high'
                            });
                        } else if (currentAQI >= 101) {
                            notifications.push({
                                id: ++notificationIdCounter,
                                type: 'warning',
                                title: 'Chronic Bronchitis - Unhealthy Air',
                                message: 'Air quality is unhealthy! Smokers and chronic bronchitis patients should be cautious.',
                                time: currentTime,
                                read: false,
                                priority: 'high'
                            });
                        }
                        break;

                    case 'sinusitis':
                        if (currentAQI >= 101) {
                            notifications.push({
                                id: ++notificationIdCounter,
                                type: 'warning',
                                title: 'Sinusitis - Sensitive Nose and Sinuses',
                                message: 'AQI is high, take precautions against sinusitis risk.',
                                time: currentTime,
                                read: false,
                                priority: 'medium'
                            });
                        }
                        break;



                    case 'heart-disease':
                        if (currentAQI >= 201) {
                            notifications.push({
                                id: ++notificationIdCounter,
                                type: 'error',
                                title: 'Heart Disease - Hazardous Weather',
                                message: 'Weather is hazardous! Stay indoors and avoid going outside unless necessary.',
                                time: currentTime,
                                read: false,
                                priority: 'high'
                            });
                        } else if (currentAQI >= 151) {
                            notifications.push({
                                id: ++notificationIdCounter,
                                type: 'warning',
                                title: 'Heart Disease - Very Unhealthy Air',
                                message: 'Air quality is very unhealthy! Heart patients should stay indoors.',
                                time: currentTime,
                                read: false,
                                priority: 'high'
                            });
                        } else if (currentAQI >= 101) {
                            notifications.push({
                                id: ++notificationIdCounter,
                                type: 'warning',
                                title: 'Heart Disease - Unhealthy Air',
                                message: 'Air quality is unhealthy! Heart patients should be cautious outdoors.',
                                time: currentTime,
                                read: false,
                                priority: 'high'
                            });
                        }
                        break;

                    case 'hypertension':
                        if (currentTemp >= 35) {
                            notifications.push({
                                id: ++notificationIdCounter,
                                type: 'warning',
                                title: 'Hypertension - Very Hot Weather',
                                message: 'The weather is very hot, hypertension patients should stay in the shade and drink plenty of water.',
                                time: currentTime,
                                read: false,
                                priority: 'high'
                            });
                        } else if (currentTemp >= 30) {
                            notifications.push({
                                id: ++notificationIdCounter,
                                type: 'warning',
                                title: 'Hypertension - Hot Weather',
                                message: 'Hot weather may increase hypertension risk. Be cautious.',
                                time: currentTime,
                                read: false,
                                priority: 'medium'
                            });
                        }
                        break;

                    case 'diabetes':
                        if (currentTemp >= 35 && currentHumidity > 80) {
                            notifications.push({
                                id: ++notificationIdCounter,
                                type: 'warning',
                                title: 'Diabetes - Extremely Hot and Humid',
                                message: 'Extremely hot and humid! Diabetes patients should stay indoors.',
                                time: currentTime,
                                read: false,
                                priority: 'high'
                            });
                        } else if (currentTemp >= 30 && currentTemp <= 35 && currentHumidity > 70) {
                            notifications.push({
                                id: ++notificationIdCounter,
                                type: 'warning',
                                title: 'Diabetes - Hot and Humid Weather',
                                message: 'Temperature and humidity are high! Diabetes patients should be cautious.',
                                time: currentTime,
                                read: false,
                                priority: 'medium'
                            });
                        }
                        break;
                }
            });

            return notifications;
        }

        function displaySmartNotifications(notifications) {
            const panel = document.getElementById('smartNotificationsPanel');
            panel.innerHTML = '';

            // Only show unread notifications in the panel, and exclude dismissed ones
            const unreadNotifications = notifications.filter(n => !n.read && !n.dismissed);

            // Sort by priority and time
            const sortedNotifications = unreadNotifications.sort((a, b) => {
                const priorityOrder = { high: 3, medium: 2, low: 1 };
                if (priorityOrder[a.priority] !== priorityOrder[b.priority]) {
                    return priorityOrder[b.priority] - priorityOrder[a.priority];
                }
                return b.time - a.time;
            });

            sortedNotifications.slice(0, 3).forEach(notification => {
                const notificationElement = createNotificationElement(notification);
                panel.appendChild(notificationElement);
            });

            // Update alerts section with all notifications
            updateAlertsSection(notifications);
        }

        function createNotificationElement(notification) {
            const div = document.createElement('div');
            const colors = {
                success: { bg: 'bg-green-100', icon: 'bg-green-600', text: 'text-green-900' },
                warning: { bg: 'bg-orange-100', icon: 'bg-orange-600', text: 'text-orange-900' },
                error: { bg: 'bg-red-100', icon: 'bg-red-600', text: 'text-red-900' },
                info: { bg: 'bg-blue-100', icon: 'bg-blue-600', text: 'text-blue-900' }
            };

            const color = colors[notification.type];
            const timeAgo = getTimeAgo(notification.time);
            const timeString = notification.time.toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' });

            div.className = `${color.bg} rounded-lg p-4 shadow-lg backdrop-blur-sm relative`;
            div.innerHTML = `
        <div class="absolute top-2 right-2 flex items-center gap-2">
            <span class="text-xs ${color.text} opacity-80 font-medium">${timeString}</span>
            <button onclick="dismissNotification(${notification.id})" class="w-6 h-6 bg-white bg-opacity-80 hover:bg-opacity-100 rounded-full flex items-center justify-center text-gray-700 hover:text-gray-900 transition-colors shadow-sm">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        <div class="flex items-start gap-3 pr-16">
            <div class="w-8 h-8 ${color.icon} rounded-full flex items-center justify-center text-white text-sm flex-shrink-0 shadow-sm">
                ${notification.type === 'success' ? '‚úì' : notification.type === 'warning' ? '‚ö†' : notification.type === 'error' ? '‚úï' : 'i'}
            </div>
            <div class="flex-1">
                <h4 class="font-semibold ${color.text} text-sm">${notification.title}</h4>
                <p class="text-sm ${color.text} opacity-90 mt-1">${notification.message}</p>
                <p class="text-xs ${color.text} opacity-70 mt-2">${timeAgo}</p>
            </div>
        </div>
    `;

            // Smart notifications i√ßin de 8 saniye sonra kaldƒ±r - EKLE
            setTimeout(() => {
                if (div.parentNode) {
                    div.remove();
                    // Bildirimi smartNotifications array'inden de kaldƒ±r
                    const index = smartNotifications.findIndex(n => n.id === notification.id);
                    if (index > -1) {
                        smartNotifications.splice(index, 1);
                    }
                }
            }, 8000);

            return div;
        }

        function updateAlertsSection(notifications) {
            const alertsList = document.getElementById('alertsList');
            alertsList.innerHTML = '';

            notifications.forEach(notification => {
                const alertElement = createAlertElement(notification);
                alertsList.appendChild(alertElement);
            });
        }

        function createAlertElement(notification) {
            const div = document.createElement('div');
            const colors = {
                success: { bg: 'bg-green-100', icon: 'bg-green-600', text: 'text-green-900' },
                warning: { bg: 'bg-orange-100', icon: 'bg-orange-600', text: 'text-orange-900' },
                error: { bg: 'bg-red-100', icon: 'bg-red-600', text: 'text-red-900' },
                info: { bg: 'bg-blue-100', icon: 'bg-blue-600', text: 'text-blue-900' }
            };

            const color = colors[notification.type];
            const timeAgo = getTimeAgo(notification.time);
            const timeString = notification.time.toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' });
            const readClass = notification.read ? 'opacity-60' : '';

            div.className = `flex items-start gap-3 p-4 ${color.bg} rounded-lg ${readClass} hover:shadow-md transition-all relative`;

            div.innerHTML = `
                <div class="w-8 h-8 ${color.icon} rounded-full flex items-center justify-center text-white text-sm flex-shrink-0 shadow-sm">
                    ${notification.type === 'success' ? '‚úì' : notification.type === 'warning' ? '‚ö†' : notification.type === 'error' ? '‚úï' : 'i'}
                </div>
                <div class="flex-1 pr-20">
                    <div class="flex items-center gap-2 mb-1">
                        <h4 class="font-medium ${color.text}">${notification.title}</h4>
                        ${!notification.read ? '<div class="w-2 h-2 bg-blue-600 rounded-full shadow-sm"></div>' : ''}
                    </div>
                    <p class="text-sm ${color.text} opacity-90 mb-2">${notification.message}</p>
                    <div class="flex items-center justify-between">
                        <p class="text-xs ${color.text} opacity-70">${timeAgo}</p>
                    </div>
                </div>
                <div class="absolute top-4 right-4 flex items-center gap-2">
                    <span class="text-xs ${color.text} opacity-80 font-medium">${timeString}</span>
                    <label class="flex items-center cursor-pointer">
                        <input type="checkbox" ${notification.read ? 'checked' : ''} 
                               onchange="markNotificationAsRead(${notification.id}, this.checked)"
                               class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2">
                        <span class="ml-1 text-xs ${color.text} opacity-80">Okundu</span>
                    </label>
                </div>
            `;

            return div;
        }

        function dismissNotification(id) {
            // Mark notification as dismissed (only hide from live panel)
            const notification = smartNotifications.find(n => n.id === id);
            if (notification) {
                notification.dismissed = true;
            }

            // Remove from display panel only, stays in alerts section as unread
            displaySmartNotifications(smartNotifications);
        }

        function toggleNotificationRead(id) {
            const notification = smartNotifications.find(n => n.id === id);
            if (notification) {
                notification.read = !notification.read;
                updateAlertsSection(smartNotifications);
            }
        }

        function markNotificationAsRead(id, isChecked) {
            const notification = smartNotifications.find(n => n.id === id);
            if (notification) {
                notification.read = isChecked;

                // If marked as read, remove from notifications and update display
                if (isChecked) {
                    // Remove from smartNotifications array
                    const index = smartNotifications.findIndex(n => n.id === id);
                    if (index > -1) {
                        smartNotifications.splice(index, 1);
                    }

                    // Update both displays
                    displaySmartNotifications(smartNotifications);
                    updateAlertsSection(smartNotifications);

                    showNotification('Notification deleted.', 'success');
                } else {
                    // Just update the display if unchecked
                    updateAlertsSection(smartNotifications);
                }
            }
        }

        function markAllAsRead() {
            // Remove all notifications from the array
            smartNotifications = [];

            // Update both displays
            displaySmartNotifications(smartNotifications);
            updateAlertsSection(smartNotifications);

            showNotification('All notifications deleted', 'success');
        }

        function getTimeAgo(time) {
            const now = new Date();
            const diffMs = now - time;
            const diffMins = Math.floor(diffMs / 60000);

            if (diffMins < 1) return 'Now';
            if (diffMins < 60) return `${diffMins} minutes ago`;
            const diffHours = Math.floor(diffMins / 60);
            if (diffHours < 24) return `${diffHours} hours ago`;
            const diffDays = Math.floor(diffHours / 24);
            return `${diffDays} days ago`;
        }


        function updateWindAndPollenTrends() {
            // Update wind trend
            const windTrends = [
                { icon: '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 17l9.2-9.2M17 17V7H7"></path></svg>', color: 'text-green-600', text: 'Artƒ±yor' },
                { icon: '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 7l-9.2 9.2M7 7v10h10"></path></svg>', color: 'text-red-600', text: 'Azalƒ±yor' },
                { icon: '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path></svg>', color: 'text-gray-600', text: 'Sabit' }
            ];

            const windTrend = windTrends[Math.floor(Math.random() * windTrends.length)];
            const windTrendElement = document.getElementById('windTrend');
            if (windTrendElement) {
                windTrendElement.className = `flex items-center ${windTrend.color}`;
                windTrendElement.innerHTML = `${windTrend.icon}<span class="text-xs ml-1">${windTrend.text}</span>`;
            }


            const currentTemp = parseInt(document.querySelector('.text-3xl.font-bold.text-blue-600').textContent) || 22;
            const currentFeelsLike = parseInt(document.getElementById('feelsLikeTemp').textContent) || 24;
            const feelsLikeTrend = getFeelsLikeTrend(currentTemp, currentFeelsLike);

            // Hissedilen sƒ±caklƒ±k trendini g√∂ster
            const feelsLikeElement = document.getElementById('feelsLikeTemp');
            if (feelsLikeElement && feelsLikeTrend) {
                feelsLikeElement.innerHTML = `${currentFeelsLike}¬∞C <span class="text-sm ${feelsLikeTrend.color}">${feelsLikeTrend.text}</span>`;
            }
        }

        // Data update simulation
        function startDataUpdates() {
            setInterval(() => {
                // Simulate small AQI changes
                const currentAQI = parseInt(document.getElementById('aqiValue').textContent);
                const change = Math.floor(Math.random() * 6) - 3; // -3 to +3
                const newAQI = Math.max(10, Math.min(200, currentAQI + change));

                if (newAQI !== currentAQI) {
                    updateAQIDisplay(newAQI);
                }

                // Hissedilen sƒ±caklƒ±k ve diƒüer deƒüerleri de g√ºncelle
                const currentTemp = parseInt(document.querySelector('.text-3xl.font-bold.text-blue-600').textContent) || 22;
                const currentHumidity = parseInt(document.getElementById('humidityValue').textContent) || 68;
                const currentWind = parseInt(document.getElementById('windValue').textContent) || 12;

                // Hissedilen sƒ±caklƒ±ƒüƒ± yeniden hesapla
                const newFeelsLike = calculateFeelsLike(currentTemp, currentHumidity, currentWind);
                document.getElementById('feelsLikeTemp').textContent = newFeelsLike + '¬∞C';

                // BULUTLULUK DEƒûERƒ∞Nƒ∞ G√úNCELLE (YENƒ∞ EKLENEN)
                const currentCloudiness = parseInt(document.getElementById('cloudinessValue').textContent) || 45;
                const cloudinessChange = Math.floor(Math.random() * 11) - 5; // -5 to +5
                const newCloudiness = Math.max(0, Math.min(100, currentCloudiness + cloudinessChange));
                document.getElementById('cloudinessValue').textContent = newCloudiness + '%';

                // Bulutluluk durumunu g√ºncelle
                let cloudinessDescription = '';
                if (newCloudiness < 20) cloudinessDescription = 'Clear';
                else if (newCloudiness < 50) cloudinessDescription = 'Partly cloudy';
                else if (newCloudiness < 80) cloudinessDescription = 'Cloudy';
                else cloudinessDescription = 'Overcast';

                document.querySelector('#cloudinessValue + .text-sm.text-gray-600').textContent = cloudinessDescription;

                // Update wind and other trends
                updateWindAndPollenTrends();
            }, 30000); // Update every 30 seconds
        }
        // ========== BACKEND AKTƒ∞Vƒ∞TE KONTROL Sƒ∞STEMƒ∞ ==========
        function checkActivity(activity, temp, wind, rain, aqi, pm25) {
            rain = Boolean(rain);
            let status = "Suitable";
            let reasons = [];

            // Hava kalitesi kontrol√º
            if (aqi >= 4 || pm25 > 50) {
                status = "Not Suitable";
                reasons.push("Air quality risky (AQI/PM2.5)");
            }

            switch (activity) {
                case 'swimming':
                    if (temp < 20) {
                        status = "Not Suitable";
                        reasons.push("Temperature too low for swimming");
                    }
                    if (rain) {
                        status = "Not Suitable";
                        reasons.push("Rain not suitable for swimming");
                    }
                    if (temp >= 20 && !rain) {
                        reasons.push("Weather suitable for swimming");
                    }
                    break;

                case 'running':
                    if (temp < 5 || temp > 32) {
                        status = "Not Suitable";
                        reasons.push("Temperature not suitable for runningl");
                    }
                    if (wind > 8) {
                        status = "Not Suitable";
                        reasons.push("Wind too strong for running");
                    }
                    if (temp >= 5 && temp <= 32 && wind <= 8) {
                        reasons.push("Weather suitable for running");
                    }
                    break;

                case 'golf':
                    if (wind > 10) {
                        status = "Not Suitable";
                        reasons.push("Wind not suitable for golf");
                    }
                    if (rain) {
                        status = "Not Suitable";
                        reasons.push("Rain not suitable for golf");
                    }
                    if (wind <= 10 && !rain) {
                        reasons.push("Weather suitable for golf");
                    }
                    break;

                case 'walking':
                case 'hiking':
                    if (temp < 5 || temp > 35) {
                        status = "Not Suitable";
                        reasons.push("Temperature not suitable for walking");
                    }
                    if (rain) {
                        status = "Not Suitable";
                        reasons.push("Rain not suitable for walking");
                    }
                    if (temp >= 5 && temp <= 35 && !rain) {
                        reasons.push("Weather suitable for walking");
                    }
                    break;

                case 'cycling':
                    if (wind > 9) {
                        status = "Uygun Deƒüil";
                        reasons.push("Wind dangerous for cycling");
                    }
                    if (rain) {
                        status = "Uygun Deƒüil";
                        reasons.push("Rain not suitable for cycling");
                    }
                    if (wind <= 9 && !rain) {
                        reasons.push("Weather suitable for cycling");
                    }
                    break;

                case 'tennis':
                    if (wind > 12) {
                        status = "Not Suitable";
                        reasons.push("Wind too strong for tennis");
                    }
                    if (rain) {
                        status = "Not Suitable";
                        reasons.push("Rain not suitable for tennis");
                    }
                    if (wind <= 12 && !rain) {
                        reasons.push("Weather suitable for tennis");
                    }
                    break;

                case 'sports':
                    if (temp < 0 || temp > 36) {
                        status = "Not Suitable";
                        reasons.push("Temperature not suitable for outdoor sports");
                    }
                    if (rain) {
                        status = "Not Suitable";
                        reasons.push("Rain not suitable for outdoor sports");
                    }
                    if (wind > 15) {
                        status = "Not Suitable";
                        reasons.push("Wind dangerous for outdoor sports");
                    }
                    if (temp >= 0 && temp <= 36 && !rain && wind <= 15) {
                        reasons.push("Weather suitable for outdoor sports");
                    }
                    break;
            }

            return { aktivite: activity, durum: status, neden: reasons };
        }

        // ========== YA≈û GRUBU √ñNERƒ∞LERƒ∞ ==========
        function ageGroupAdvice(ageGroup, temp, aqi, pm25) {
            let status = "Suitable";
            let reasons = [];

            if (ageGroup === "child") {
                if (aqi >= 3 || pm25 > 40) {
                    status = "Uygun Deƒüil";
                    reasons.push("Children: Air quality is risky. Polluted air and PM2.5 can irritate the respiratory system.");
                }
                if (temp < 10 || temp > 30) {
                    status = "Not Suitable";
                    reasons.push("Children: Temperature is not suitable. Extreme cold or heat can affect their body balance and breathing..");
                }
                if (status === "Suitable") {
                    reasons.push("The weather is suitable for children.");
                }
            } else if (ageGroup === "adult") {
                if (aqi >= 4 || pm25 > 50) {
                    status = "Not Suitable";
                    reasons.push("Adults: Air quality is risky. Polluted air and PM2.5 can affect respiratory and heart health.");
                }
                if (temp < 5 || temp > 32) {
                    status = "Not Suitable";
                    reasons.push("Adults: Temperature is not suitable. Extreme cold or heat can put extra stress on the body.");
                }
                if (status === " Suitable") {
                    reasons.push("The weather is suitable for adults.");
                }
            } else if (ageGroup === "elderly") {
                if (aqi >= 3 || pm25 > 40) {
                    status = "Not Suitable";
                    reasons.push("Elderly: Air quality is risky. Polluted air and PM2.5 can strain the respiratory and circulatory system.");
                }
                if (temp < 10 || temp > 28) {
                    status = "Uygun Deƒüil";
                    reasons.push("Elderly: Temperature is not suitable. Extreme cold or heat can increase health risks.");
                }
                if (status === "Suitable") {
                    reasons.push("The weather is suitable for the elderly.");
                }
            }

            return { ageGroup: ageGroup, durum: status, neden: reasons.join("; ") };
        }

        // ========== HAMƒ∞LELƒ∞K √ñNERƒ∞LERƒ∞ ==========
        function pregnancyAdvice(statusGroup, temp, aqi, pm25) {
            let status = "Suitable";
            let reasons = [];

            if (statusGroup === "pregnant") {
                if (aqi >= 3 || pm25 > 40) {
                    status = "Not Suitable";
                    reasons.push("Pregnant women: Air quality is risky. Polluted air and PM2.5 can affect respiratory and circulatory systems.");
                }
                if (temp < 10 || temp > 32) {
                    status = "Not Suitable";
                    reasons.push("Pregnant women: Temperature is not suitable. Extreme cold or heat can stress the body and circulatory system.");
                }
                if (status === "Suitable") {
                    reasons.push("The weather is suitable for pregnant women.");
                }
            } else if (statusGroup === "breastfeeding") {
                if (aqi >= 4 || pm25 > 50) {
                    status = "Not Suitable";
                    reasons.push("Breastfeeding mothers: Air quality is risky. Polluted air and PM2.5 can affect the mother's respiratory system.");
                }
                if (temp < 10 || temp > 32) {
                    status = "Not Suitable";
                    reasons.push("Breastfeeding mothers: Temperature is not suitable. Extreme cold or heat can cause stress for the mother.");
                }
                if (status === "Suitable") {
                    reasons.push("The weather is suitable for breastfeeding mothers.");
                }
            }

            return { statusGroup: statusGroup, durum: status, neden: reasons.join("; ") };
        }

        // ========== SOLUNUM HASTALIKLARI √ñNERƒ∞LERƒ∞ ==========
        function respiratoryAdvice(disease, aqi, pm25) {
            let status = "Suitable";
            let reasons = [];

            if (disease === "asthma" || disease === "copd") {
                if (pm25 > 30 || aqi >= 3) {
                    status = "Not Suitable";
                    reasons.push(`${getDiseaseName(disease)} patients: Air quality is risky. Polluted air and PM2.5 can irritate the respiratory system.`);
                } else {
                    reasons.push(`The weather is suitable for ${getDiseaseName(disease)} patients.`);
                }
            } else if (disease === "sinusitis") {
                if (aqi >= 4) {
                    status = "Not Suitable";
                    reasons.push("Sinusitis patients: Air quality is high. Polluted air can irritate the sinuses");
                } else {
                    reasons.push("The weather is suitable for sinusitis patients.");
                }
            } else if (disease === "bronchitis") {
                if (pm25 > 25 || aqi >= 3) {
                    status = "Not Suitable";
                    reasons.push("Chronic bronchitis patients: Air quality is risky. PM2.5 and polluted air can strain the bronchi.");
                } else {
                    reasons.push("The weather is suitable for chronic bronchitis patients");
                }
            } else if (disease === "allergies") {
                if (aqi >= 3) {
                    status = "Not Suitable";
                    reasons.push("Allergy sufferers: Air quality is risky. Pollution can increase allergic reactions.");
                } else {
                    reasons.push("The weather is suitable for allergy sufferers.");
                }
            }

            return { disease: disease, durum: status, neden: reasons.join("; ") };
        }

        // ========== KARDƒ∞YOVASK√úLER VE METABOLƒ∞K HASTALIKLAR ==========
        function cardioMetabolicAdvice(disease, temp, aqi, pm25) {
            let status = "Uygun";
            let reasons = [];

            if (disease === "diabetes") {
                if (temp < 5 || temp > 32 || aqi >= 4 || pm25 > 50) {
                    status = "Not Suitable";
                    reasons.push("Risky weather conditions for diabetes patients. Extreme temperatures or polluted air may affect blood sugar balance.");
                } else {
                    reasons.push("Risky weather conditions for diabetes patients. Extreme temperatures or polluted air may affect blood sugar balance.");
                }
            } else if (disease === "heart-disease") {
                if (temp < 5 || temp > 30 || aqi >= 4 || pm25 > 50) {
                    status = "Not Suitable";
                    reasons.push("Risky weather conditions for heart disease patients. Heat and air pollution can increase stress on the heart");
                } else {
                    reasons.push("The weather is suitable for heart disease patients");
                }
            } else if (disease === "hypertension") {
                if (temp < 5 || temp > 30 || aqi >= 4 || pm25 > 50) {
                    status = "Not Suitable";
                    reasons.push("Risky weather conditions for hypertension patients. Temperature changes and polluted air can raise blood pressure");
                } else {
                    reasons.push("The weather is suitable for hypertension patients.");
                }
            }

            return { disease: disease, durum: status, neden: reasons.join("; ") };
        }

        // ========== YARDIMCI FONKSƒ∞YONLAR ==========
        function getDiseaseName(disease) {
            const names = {
                'asthma': 'Asthma',
                'copd': 'COPD',
                'bronchitis': 'Chronic Bronchitis',
                'sinusitis': 'Sinusitis',
                'allergies': 'Allergies',
                'heart-disease': 'Heart Disease',
                'hypertension': 'Hypertension',
                'diabetes': 'Diabetes'

            };
            return names[disease] || disease;
        }

        function getActivityName(activityId) {
            const names = {
                'running': 'Running',
                'cycling': 'Cycling',
                'walking': 'Walking',
                'sports': 'Outdoor Sports',
                'swimming': 'Swimming',
                'hiking': 'Hiking',
                'tennis': 'Tennis',
                'golf': 'Golf'

            };
            return names[activityId] || activityId;
        }

        function getAgeGroupName(ageGroup) {
            const names = {
                'child': 'Child',
                'adult': 'Adult',
                'elderly': 'Elderly'

            };
            return names[ageGroup] || ageGroup;
        }

        // ========== BACKEND Bƒ∞LDƒ∞Rƒ∞MLERƒ∞Nƒ∞ OLU≈ûTUR ==========
        function generateBackendNotifications(temp, aqi, pm25, wind, humidity) {
            const notifications = [];
            const currentTime = new Date();

            // Yaƒümur durumunu belirle (nem %80'den fazla ise yaƒümurlu kabul et)
            const rain = humidity > 80;

            console.log('Generating backend notifications with:', {
                temp, aqi, pm25, wind, humidity, rain,
                healthPreferences: healthPreferences,
                selectedActivities: selectedActivities // Se√ßili aktiviteleri log'la
            });

            // T√ºm aktiviteler yerine sadece kullanƒ±cƒ±nƒ±n se√ßtiƒüi aktiviteleri kontrol et
            // 1. AKTƒ∞Vƒ∞TE Bƒ∞LDƒ∞Rƒ∞MLERƒ∞ - SADECE SE√áƒ∞Lƒ∞ AKTƒ∞Vƒ∞TELER ƒ∞√áƒ∞N
            const locationName = currentLocationData.name || 'Current Location';
            selectedActivities.forEach(activityId => {
                const activityResult = checkActivity(activityId, temp, wind, rain, aqi, pm25);

                if (activityResult.durum === "Not Suitable") {
                    notifications.push({
                        id: Date.now() + Math.random(),
                        type: 'warning',
                        title: `${locationName} - ${getActivityName(activityId)} Not Suitable`,
                        message: activityResult.neden.join(', '),
                        time: currentTime,
                        read: false,
                        priority: 'medium'
                    });
                }
            });

            // 2. YA≈û GRUBU Bƒ∞LDƒ∞Rƒ∞MLERƒ∞
            if (healthPreferences.ageGroup) {
                const ageResult = ageGroupAdvice(healthPreferences.ageGroup, temp, aqi, pm25);

                if (ageResult.durum === "Not Suitable") {
                    notifications.push({
                        id: Date.now() + Math.random(),
                        type: 'warning',
                        title: `${locationName} - ${getAgeGroupName(healthPreferences.ageGroup)} Warning`,
                        message: ageResult.neden,
                        time: currentTime,
                        read: false,
                        priority: 'high'
                    });
                }
            }

            // 3. HAMƒ∞LELƒ∞K Bƒ∞LDƒ∞Rƒ∞MLERƒ∞
            if (healthPreferences.isPregnant) {
                const pregnancyResult = pregnancyAdvice("pregnant", temp, aqi, pm25);
                if (pregnancyResult.durum === "Not Suitable") {
                    notifications.push({
                        id: Date.now() + Math.random(),
                        type: 'error',
                        title: 'Warning for Pregnant Women',
                        message: pregnancyResult.neden,
                        time: currentTime,
                        read: false,
                        priority: 'high'
                    });
                }
            }

            if (healthPreferences.isBreastfeeding) {
                const breastfeedingResult = pregnancyAdvice("breastfeeding", temp, aqi, pm25);
                if (breastfeedingResult.durum === "Not Suitable") {
                    notifications.push({
                        id: Date.now() + Math.random(),
                        type: 'error',
                        title: 'Warning for Breastfeeding Mothers',
                        message: breastfeedingResult.neden,
                        time: currentTime,
                        read: false,
                        priority: 'high'
                    });
                }
            }

            // 4. HASTALIK Bƒ∞LDƒ∞Rƒ∞MLERƒ∞
            console.log('Health conditions to check:', healthPreferences.conditions);

            healthPreferences.conditions.forEach(condition => {
                console.log(`Checking condition: ${condition}`);

                let healthResult;

                if (['asthma', 'copd', 'bronchitis', 'sinusitis', 'allergies'].includes(condition)) {
                    healthResult = respiratoryAdvice(condition, aqi, pm25);
                } else if (['heart-disease', 'hypertension', 'diabetes'].includes(condition)) {
                    healthResult = cardioMetabolicAdvice(condition, temp, aqi, pm25);
                }

                if (healthResult && healthResult.durum === "Uygun Deƒüil") {
                    console.log(`Adding notification for ${condition}:`, healthResult);
                    notifications.push({
                        id: Date.now() + Math.random(),
                        type: 'warning',
                        title: `${getDiseaseName(condition)} Hastalarƒ± ƒ∞√ßin Uyarƒ±`,
                        message: healthResult.neden,
                        time: currentTime,
                        read: false,
                        priority: 'high'
                    });
                }
            });

            console.log('Generated backend notifications:', notifications.length);
            return notifications.slice(0, 8); // En fazla 8 bildirim
        }
    </script>
    <script>(function () { function c() { var b = a.contentDocument || a.contentWindow.document; if (b) { var d = b.createElement('script'); d.innerHTML = "window.__CF$cv$params={r:'983b83d7e7182c88',t:'MTc1ODY0NTk1My4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);"; b.getElementsByTagName('head')[0].appendChild(d) } } if (document.body) { var a = document.createElement('iframe'); a.height = 1; a.width = 1; a.style.position = 'absolute'; a.style.top = 0; a.style.left = 0; a.style.border = 'none'; a.style.visibility = 'hidden'; document.body.appendChild(a); if ('loading' !== document.readyState) c(); else if (window.addEventListener) document.addEventListener('DOMContentLoaded', c); else { var e = document.onreadystatechange || function () { }; document.onreadystatechange = function (b) { e(b); 'loading' !== document.readyState && (document.onreadystatechange = e, c()) } } } })();</script>
</body>

</html>
